%{ 
open AST
open AST.Workspace
open Terrabuild.Expressions
open System


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start WorkspaceFile
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token STRING_START
%token <string> STRING_END
%token <string> EXPRESSION_START
%token EXPRESSION_END
%token <string> IDENTIFIER
%token <string> EXTENSION_IDENTIFIER
%token <string> TARGET_IDENTIFIER
%token <string> VARIABLE
%token <string> KEY
%token <int> NUMBER

%token LBRACE RBRACE
%token DOT DOT_QUESTION LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL DOUBLE_EQUAL NOT_EQUAL
%token COMMA
%token MINUS PLUS
%token TRIM UPPER LOWER REPLACE COUNT VERSION FORMAT TOSTRING
%token DOUBLE_QUESTION QUESTION COLON BANG AND OR
%token EOF
%token WORKSPACE TARGET CONFIGURATION EXTENSION
%token PROJECT IGNORES ID DEPENDS_ON REBUILD VARIABLES CONTAINER PLATFORM INIT SCRIPT DEFAULTS NAME

// associativity and precedences
%right LSQBRACKET
%left RSQBRACKET
%left COLON
%right QUESTION
%left DOUBLE_QUESTION
%left DOUBLE_EQUAL NOT_EQUAL
%left MINUS PLUS
%left OR AND
%left DOT DOT_QUESTION
%right BANG
%left COMMA

%type <AST.Workspace.WorkspaceFile> WorkspaceFile
%% 

WorkspaceFile:
    | WorkspaceFileComponents EOF { WorkspaceFile.Build $1 }

WorkspaceFileComponents:
    | /* empty */ { [] }
    | WorkspaceFileComponents Workspace { $1 @ [$2] }
    | WorkspaceFileComponents Target { $1 @ [$2] }
    | WorkspaceFileComponents Configuration { $1 @ [$2] }
    | WorkspaceFileComponents Extension { $1 @ [$2] }

Workspace:
    | WORKSPACE LBRACE WorkspaceComponents RBRACE { WorkspaceBlock.Build $3 |> WorkspaceFileComponents.Workspace }
WorkspaceComponents:
    | /* empty */ { [] }
    | WorkspaceComponents WorkspaceSpace { $1 @ [$2] }
    | WorkspaceComponents WorkspaceIgnores { $1 @ [$2] }
WorkspaceSpace:
    | ID EQUAL String { WorkspaceComponents.Id $3 }
WorkspaceIgnores:
    | IGNORES EQUAL ListOfString { WorkspaceComponents.Ignores $3 }

Target:
    | TARGET IDENTIFIER { TargetBlock.Build $2 [] |> WorkspaceFileComponents.Target }
    | TARGET IDENTIFIER LBRACE TargetComponents RBRACE { TargetBlock.Build $2 $4 |>  WorkspaceFileComponents.Target }
TargetComponents:
    | /* empty */ { [] }
    | TargetComponents TargetDependsOn { $1 @ [$2] }
    | TargetComponents TargetRebuild { $1 @ [$2] }
TargetDependsOn:
    | DEPENDS_ON EQUAL ListOfTargetIdentifiers { TargetComponents.DependsOn $3 }
TargetRebuild:
    | REBUILD EQUAL Expr { TargetComponents.Rebuild $3 }

Configuration:
    | CONFIGURATION IDENTIFIER { ConfigurationBlock.Build $2 [] |> WorkspaceFileComponents.Configuration }
    | CONFIGURATION LBRACE ConfigurationComponents RBRACE { ConfigurationBlock.Build "default" $3 |> WorkspaceFileComponents.Configuration }
    | CONFIGURATION IDENTIFIER LBRACE ConfigurationComponents RBRACE { ConfigurationBlock.Build $2 $4 |> WorkspaceFileComponents.Configuration }
ConfigurationComponents:
    | /* empty */ { [] }
    | ConfigurationComponents ConfigurationVariables { $1 @ [$2] }
ConfigurationVariables:
    | VARIABLES EQUAL ExprMap { ConfigurationComponents.Variables $3 }

Extension:
    | EXTENSION ExtensionIdentifier LBRACE ExtensionComponents RBRACE { ExtensionBlock.Build $2 $4 |> WorkspaceFileComponents.Extension }
ExtensionComponents:
    | /* empty */ { [] }
    | ExtensionComponents ExtensionContainer { $1 @ [$2] }
    | ExtensionComponents ExtensionPlaform { $1 @ [$2] }
    | ExtensionComponents ExtensionVariables { $1 @ [$2] }
    | ExtensionComponents ExtensionScript { $1 @ [$2] }
    | ExtensionComponents ExtensionDefaults { $1 @ [$2] }
ExtensionContainer:
    | CONTAINER EQUAL Expr { ExtensionComponents.Container $3 }
ExtensionPlaform:
    | PLATFORM EQUAL Expr { ExtensionComponents.Platform $3 }
ExtensionVariables:
    | VARIABLES EQUAL ListOfString { ExtensionComponents.Variables $3 }
ExtensionScript:
    | SCRIPT EQUAL String { ExtensionComponents.Script $3 }
ExtensionDefaults:
    | DEFAULTS EQUAL ExprMap { ExtensionComponents.Defaults $3 }

Expr:
    /* structures */
    | ExprList { Expr.List $1 }
    | ExprMap { Expr.Map $1 }
    /* scalars */
    | NOTHING { Expr.Nothing }
    | TRUE { Expr.Bool true }
    | FALSE { Expr.Bool false }
    | NUMBER { Expr.Number $1 }
    | VARIABLE { Expr.Variable $1 }
    | String { $1 }
    /* functions */
    | Expr DOT ExprIndex { Expr.Function (Function.Item, [$1;  $3]) }
    | Expr DOT_QUESTION ExprIndex { Expr.Function (Function.TryItem, [$1; $3]) }
    | Expr DOUBLE_EQUAL Expr { Expr.Function (Function.Equal, [$1; $3]) }
    | Expr NOT_EQUAL Expr { Expr.Function (Function.NotEqual, [$1; $3]) }
    | Expr PLUS Expr { Expr.Function (Function.Plus, [$1; $3]) }
    | Expr MINUS Expr { Expr.Function (Function.Minus, [$1; $3]) }
    | Expr AND Expr { Expr.Function (Function.And, [$1; $3]) }
    | Expr OR Expr { Expr.Function (Function.Or, [$1; $3]) }
    | TRIM ExprTuple { Expr.Function (Function.Trim, $2) }
    | UPPER ExprTuple { Expr.Function (Function.Upper, $2) }
    | LOWER ExprTuple { Expr.Function (Function.Lower, $2) }
    | REPLACE ExprTuple { Expr.Function (Function.Replace, $2) }
    | COUNT ExprTuple { Expr.Function (Function.Count, $2)}
    | VERSION ExprTuple { Expr.Function (Function.Version, $2) }
    | FORMAT ExprTuple { Expr.Function (Function.Format, $2) }
    | TOSTRING ExprTuple { Expr.Function (Function.ToString, $2) }
    | Expr DOUBLE_QUESTION Expr { Expr.Function (Function.Coalesce, [$1; $3]) }
    | Expr QUESTION Expr COLON Expr { Expr.Function (Function.Ternary, [$1; $3; $5] ) }
    | BANG Expr { Expr.Function (Function.Not, [$2]) }

InterpolatedExpr:
    /* scalars */
    | NOTHING { Expr.Nothing }
    | TRUE { Expr.Bool true }
    | FALSE { Expr.Bool false }
    | NUMBER { Expr.Number $1 }
    | VARIABLE { Expr.Variable $1 }
    /* functions */
    | InterpolatedExpr DOT ExprIndex { Expr.Function (Function.Item, [$1;  $3]) }
    | InterpolatedExpr DOT_QUESTION ExprIndex { Expr.Function (Function.TryItem, [$1; $3]) }
    | InterpolatedExpr DOUBLE_EQUAL InterpolatedExpr { Expr.Function (Function.Equal, [$1; $3]) }
    | InterpolatedExpr NOT_EQUAL InterpolatedExpr { Expr.Function (Function.NotEqual, [$1; $3]) }
    | InterpolatedExpr PLUS InterpolatedExpr { Expr.Function (Function.Plus, [$1; $3]) }
    | InterpolatedExpr MINUS InterpolatedExpr { Expr.Function (Function.Minus, [$1; $3]) }
    | InterpolatedExpr AND InterpolatedExpr { Expr.Function (Function.And, [$1; $3]) }
    | InterpolatedExpr OR InterpolatedExpr { Expr.Function (Function.Or, [$1; $3]) }
    | TRIM InterpolatedExprTuple { Expr.Function (Function.Trim, $2) }
    | UPPER InterpolatedExprTuple { Expr.Function (Function.Upper, $2) }
    | LOWER InterpolatedExprTuple { Expr.Function (Function.Lower, $2) }
    | REPLACE InterpolatedExprTuple { Expr.Function (Function.Replace, $2) }
    | COUNT InterpolatedExprTuple { Expr.Function (Function.Count, $2)}
    | VERSION InterpolatedExprTuple { Expr.Function (Function.Version, $2) }
    | FORMAT InterpolatedExprTuple { Expr.Function (Function.Format, $2) }
    | TOSTRING InterpolatedExprTuple { Expr.Function (Function.ToString, $2) }
    | InterpolatedExpr DOUBLE_QUESTION InterpolatedExpr { Expr.Function (Function.Coalesce, [$1; $3]) }
    | InterpolatedExpr QUESTION InterpolatedExpr COLON Expr { Expr.Function (Function.Ternary, [$1; $3; $5] ) }
    | BANG InterpolatedExpr { Expr.Function (Function.Not, [$2]) }

TargetIdentifier:
    | TARGET_IDENTIFIER { $1 }
    | IDENTIFIER { $1 }

ExtensionIdentifier:
    | EXTENSION_IDENTIFIER { $1 }
    | IDENTIFIER { $1 }

ExprIndex:
    | NUMBER { Expr.Number $1 }
    | IDENTIFIER { Expr.String $1 }

Bool:
    | TRUE { true }
    | FALSE { false }

String:
    | STRING { Expr.String $1 }
    | STRING_START InterpolatedString STRING_END { 
        if $3 |> String.IsNullOrEmpty then Expr.Function (Function.ToString, [$2])
        else Expr.Function (Function.Format, [Expr.String "{0}{1}"; $2; Expr.String $3]) 
    }

InterpolatedString:
    | EXPRESSION_START Expr EXPRESSION_END { 
        if $1 |> String.IsNullOrEmpty then $2
        else Expr.Function (Function.Format, [Expr.String "{0}{1}"; Expr.String $1; $2])
    }
    | InterpolatedString EXPRESSION_START Expr EXPRESSION_END {
        if $2 |> String.IsNullOrEmpty then Expr.Function (Function.Format, [Expr.String "{0}{1}"; $1; $3])
        else Expr.Function (Function.Format, [Expr.String "{0}{1}{2}"; $1; Expr.String $2; $3])
    }

ExprTuple:
    | LPAREN ExprTupleContent RPAREN { $2 }
ExprTupleContent:
    | /* empty */ { [] }
    | Expr { [$1] }
    | ExprTupleContent COMMA Expr { $1 @ [$3] }

InterpolatedExprTuple:
    | LPAREN InterpolatedExprTupleContent RPAREN { $2 }
InterpolatedExprTupleContent:
    | /* empty */ { [] }
    | InterpolatedExpr { [$1] }
    | InterpolatedExprTupleContent COMMA InterpolatedExpr { $1 @ [$3] }

ExprList:
    | LSQBRACKET ExprListContent RSQBRACKET { $2 }
ExprListContent:
    | /* empty */ { [] }
    | ExprListContent Expr { $1 @ [$2] }

ExprMap:
    | LBRACE ExprMapContent RBRACE { $2 }
ExprMapContent:
    | /* empty */ { Map.empty }
    | ExprMapContent KEY Expr { $1.Add ($2, $3) }

ListOfString:
    | LSQBRACKET Strings RSQBRACKET { $2 }
Strings:
    | /* empty */ { [] }
    | Strings String { $1 @ [$2] }

ListOfTargetIdentifiers:
    | LSQBRACKET TargetIdentifiers RSQBRACKET { $2 }
TargetIdentifiers:
    | /* empty */ { [] }
    | TargetIdentifiers TargetIdentifier { $1 @ [$2] }
