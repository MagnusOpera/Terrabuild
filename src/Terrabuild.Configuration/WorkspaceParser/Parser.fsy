%{ 
open Terrabuild.Configuration.AST
open Terrabuild.Configuration.Workspace.AST
open Terrabuild.Expressions


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start WorkspaceFile
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token <string> IDENTIFIER
%token <string> EXTENSION_IDENTIFIER
%token <string> TARGET_IDENTIFIER
%token <string> VARIABLE
%token <string> KEY
%token <int> NUMBER

%token LBRACE RBRACE
%token LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL
%token COMMA
%token PLUS
%token TRIM UPPER LOWER VERSION
%token EOF
%token WORKSPACE TARGET CONFIGURATION EXTENSION
%token SPACE DEPENDS_ON REBUILD VARIABLES CONTAINER INIT SCRIPT DEFAULTS

// associativity and precedences
%left PLUS

%type <Terrabuild.Configuration.Workspace.AST.WorkspaceFile> WorkspaceFile
%% 

WorkspaceFile:
    | WorkspaceFileComponents EOF { $1 }

WorkspaceFileComponents:
    | /* empty */ { WorkspaceFile.Empty }
    | WorkspaceFileComponents Workspace { $1.Patch $2 }
    | WorkspaceFileComponents Target { $1.Patch $2 }
    | WorkspaceFileComponents Configuration { $1.Patch $2 }
    | WorkspaceFileComponents Extension { $1.Patch $2 }

Workspace:
    | WORKSPACE LBRACE WorkspaceComponents RBRACE { WorkspaceFileComponents.Workspace $3 }
WorkspaceComponents:
    | /* empty */ { Workspace.Empty }
    | WorkspaceComponents WorkspaceSpace { $1.Patch $2 }
WorkspaceSpace:
    | SPACE EQUAL String { WorkspaceComponents.Space $3 }

Target:
    | TARGET IDENTIFIER { WorkspaceFileComponents.Target ($2, Target.Empty) }
    | TARGET IDENTIFIER LBRACE TargetComponents RBRACE { WorkspaceFileComponents.Target ($2, $4) }
TargetComponents:
    | /* empty */ { Target.Empty }
    | TargetComponents TargetDependsOn { $1.Patch $2 }
    | TargetComponents TargetRebuild { $1.Patch $2 }
TargetDependsOn:
    | DEPENDS_ON EQUAL ListOfTargetIdentifiers { TargetComponents.DependsOn $3 }
TargetRebuild:
    | REBUILD EQUAL Bool { TargetComponents.Rebuild $3 }

Configuration:
    | CONFIGURATION IDENTIFIER { WorkspaceFileComponents.Configuration ($2, Configuration.Empty) }
    | CONFIGURATION LBRACE ConfigurationComponents RBRACE { WorkspaceFileComponents.Configuration ("default", $3) }
    | CONFIGURATION IDENTIFIER LBRACE ConfigurationComponents RBRACE { WorkspaceFileComponents.Configuration ($2, $4) }
ConfigurationComponents:
    | /* empty */ { Configuration.Empty }
    | ConfigurationComponents ConfigurationVariables { $1.Patch $2 }
ConfigurationVariables:
    | VARIABLES EQUAL LBRACE Variables RBRACE { ConfigurationComponents.Variables $4 }

Extension:
    | EXTENSION ExtensionIdentifier LBRACE ExtensionComponents RBRACE { WorkspaceFileComponents.Extension ($2, $4) }
ExtensionComponents:
    | /* empty */ { Extension.Empty }
    | ExtensionComponents ExtensionContainer { $1.Patch $2 }
    | ExtensionComponents ExtensionVariables { $1.Patch $2 }
    | ExtensionComponents ExtensionScript { $1.Patch $2 }
    | ExtensionComponents ExtensionDefaults { $1.Patch $2 }
ExtensionContainer:
    | CONTAINER EQUAL String { ExtensionComponents.Container $3 }
ExtensionVariables:
    | VARIABLES EQUAL ListOfString { ExtensionComponents.Variables $3 }
ExtensionScript:
    | SCRIPT EQUAL String { ExtensionComponents.Script $3 }
ExtensionDefaults:
    | DEFAULTS EQUAL LBRACE Variables RBRACE { ExtensionComponents.Defaults $4 }

Bool:
    | TRUE { true }
    | FALSE { false }

String:
    | STRING { $1 }
ListOfString:
    | LSQBRACKET Strings RSQBRACKET { $2 }
Strings:
    | /* empty */ { [] }
    | Strings String { $1 @ [$2] }

ListOfTargetIdentifiers:
    | LSQBRACKET TargetIdentifiers RSQBRACKET { $2 }
TargetIdentifiers:
    | /* empty */ { [] }
    | TargetIdentifiers TargetIdentifier { $1 @ [$2] }

StringVariables:
    | /* empty */ { Map.empty }
    | StringVariables StringVariable { $1.Add $2 }
StringVariable:
    | KEY String { ($1, $2) }

Variables:
    | /* empty */ { Map.empty }
    | Variables Variable { $1.Add $2 }
Variable:
    | KEY Expr { ($1, $2) }

TargetIdentifier:
    | TARGET_IDENTIFIER { $1 }
    | IDENTIFIER { $1 }

ExtensionIdentifier:
    | EXTENSION_IDENTIFIER { $1 }
    | IDENTIFIER { $1 }

Expr:
    | NOTHING { Expr.Nothing }
    | TRUE { Expr.Boolean true }
    | FALSE { Expr.Boolean false }
    | STRING { Expr.String $1 }
    | NUMBER { Expr.Number $1 }
    | VARIABLE { Expr.Variable $1 }
    | LBRACE Variables RBRACE { Expr.Map $2 }
    | Expr PLUS Expr { Expr.Function (Function.Plus, [$1; $3]) }
    | TRIM LPAREN Expr RPAREN { Expr.Function (Function.Trim, [$3]) }
    | UPPER LPAREN Expr RPAREN { Expr.Function (Function.Upper, [$3]) }
    | LOWER LPAREN Expr RPAREN { Expr.Function (Function.Lower, [$3]) }
    | VERSION LPAREN Expr RPAREN { Expr.Function (Function.Version, [$3]) }
