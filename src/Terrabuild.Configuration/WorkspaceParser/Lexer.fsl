{
// module Lexer

open Terrabuild.Configuration.Workspace.Parser  // we need the terminal tokens from the Parser
open FSharp.Text.Lexing
open System.Text

let lexeme = LexBuffer<_>.LexemeString

let mkIdentifier lexbuf =
    let s = lexbuf |> lexeme  |> string
    s.Replace("`", "").Replace(" ", "").Replace(":", "").Replace("$", "")

}

let regularIdentifier = ['a'-'z'] (['_' '-']? ['a'-'z' '0'-'9']+)*
let backquotedIdentifier = '`' regularIdentifier '`'
let identifier = regularIdentifier | backquotedIdentifier

let extensionIdentifier = '@'? identifier
let targetIdentifier = '^'? identifier
let keyIdentifier = identifier ' '* ':'
let variableIdentifier = '$' identifier

let interpolatedStringContent = [^ '\"' '$'] | '$'[^ '{' '}'] | '\\' '\"'

let quotedString = '\"' [^'\"']+ '\"'

let number = '-'? ['0'-'9']+('.'['0'-'9']+)?
let whitespace = ' ' | '\t'
let newline = '\n' | '\r' '\n'

rule token = parse
    | "nothing" { NOTHING }
    | "true" { TRUE }
    | "false" { FALSE }
    | "trim" { TRIM }
    | "upper" { UPPER }
    | "lower" { LOWER }
    | "replace" { REPLACE }
    | "count" { COUNT }
    | "version" { VERSION }
    | "format" { FORMAT }
    | "tostring" { TOSTRING }
    | "??" { DOUBLE_QUESTION }
    | "?" { QUESTION }
    | ".?" { DOT_QUESTION }
    | "." { DOT }
    | ":" { COLON }

    | "{" { LBRACE }
    | "}" { RBRACE }
    | "[" { LSQBRACKET }
    | "]" { RSQBRACKET }
    | "(" { LPAREN }
    | ")" { RPAREN }
    | "==" { DOUBLE_EQUAL }
    | "=" { EQUAL }
    | "!=" { NOT_EQUAL }
    | "," { COMMA }
    | "-" { MINUS }
    | "+" { PLUS }
    | "!" { BANG }
    | "&" { AND }
    | "|" { OR }

    | "#" { singleLineComment lexbuf }

    | "workspace" { WORKSPACE }
    | "target" { TARGET }
    | "configuration" { CONFIGURATION }
    | "extension" { EXTENSION }

    | "ignores" { IGNORES }
    | "id" { ID }
    | "depends_on" { DEPENDS_ON }
    | "rebuild" { REBUILD }
    | "variables" { VARIABLES }
    | "container" { CONTAINER }
    | "platform" { PLATFORM }
    | "script" { SCRIPT }
    | "defaults" { DEFAULTS }
    | "name" { NAME }

    | identifier { lexbuf |> mkIdentifier |> IDENTIFIER }
    | extensionIdentifier { lexbuf |> mkIdentifier |> EXTENSION_IDENTIFIER }
    | targetIdentifier { lexbuf |> mkIdentifier |> TARGET_IDENTIFIER }
    | keyIdentifier { lexbuf |> mkIdentifier |> KEY }
    | variableIdentifier { lexbuf |> mkIdentifier |> VARIABLE }

    | '"' { STRING_START }

    | number {
        let s = lexeme lexbuf |> int
        NUMBER (s)
    }

    | whitespace { token lexbuf }
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexbuf }
    | eof { EOF }
    | _ { failwithf "unrecognized input: '%s'" <| lexeme lexbuf }

and singleLineComment = parse
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexbuf }
    | eof { EOF }
    | _ { singleLineComment lexbuf }

and interpolatedString (acc: StringBuilder) = parse
    | '"' { STRING_END (acc.ToString()) }
    | "${" { EXPRESSION_START (acc.ToString())}
    | interpolatedStringContent {
        lexbuf |> lexeme |> acc.Append |> ignore
        interpolatedString acc lexbuf
    }

and interpolatedExpression = parse
    | "nothing" { NOTHING }
    | "true" { TRUE }
    | "false" { FALSE }
    | "trim" { TRIM }
    | "upper" { UPPER }
    | "lower" { LOWER }
    | "replace" { REPLACE }
    | "count" { COUNT }
    | "version" { VERSION }
    | "format" { FORMAT }
    | "tostring" { TOSTRING }
    | "??" { DOUBLE_QUESTION }
    | "?" { QUESTION }
    | ".?" { DOT_QUESTION }
    | "." { DOT }
    | ":" { COLON }

    | "[" { LSQBRACKET }
    | "]" { RSQBRACKET }
    | "(" { LPAREN }
    | ")" { RPAREN }
    | "==" { DOUBLE_EQUAL }
    | "=" { EQUAL }
    | "!=" { NOT_EQUAL }
    | "-" { MINUS }
    | "+" { PLUS }
    | "!" { BANG }
    | "&" { AND }
    | "|" { OR }

    | variableIdentifier { lexbuf |> mkIdentifier |> VARIABLE }

    | number {
        let s = lexeme lexbuf |> int
        NUMBER (s)
    }

    | whitespace { token lexbuf }

    | "}" { EXPRESSION_END }
