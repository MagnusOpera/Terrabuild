{
// module Lexer

open Terrabuild.Configuration.Workspace.Parser  // we need the terminal tokens from the Parser
open FSharp.Text.Lexing

let lexeme = LexBuffer<_>.LexemeString
}

let doubleQuote = '\"'
let extensionIdentifier = '@'? ['a'-'z'] ('_'? ['a'-'z' '0'-'9']+)*
let targetIdentifier = '^'? ['a'-'z'] ('_'? ['a'-'z' '0'-'9']+)*
let identifier = ['a'-'z'] ('_'? ['a'-'z' '0'-'9']+)*
let key = identifier ' '* ':'
let variable = '$' identifier
let quotedString = '\"' [^'\"']+ '\"'

let number = '-'? ['0'-'9']+('.'['0'-'9']+)?
let whitespace = ' ' | '\t'
let newline = '\n' | '\r' '\n'

rule token = parse
    | "nothing" { NOTHING }
    | "true" { TRUE }
    | "false" { FALSE }
    | "trim" { TRIM }
    | "upper" { UPPER }
    | "lower" { LOWER }
    | "version" { VERSION }

    | "workspace" { WORKSPACE }
    | "target" { TARGET }
    | "configuration" { CONFIGURATION }
    | "environment" { ENVIRONMENT }
    | "extension" { EXTENSION }
    
    | "space" { SPACE }
    | "depends_on" { DEPENDS_ON }
    | "rebuild" { REBUILD }
    | "variables" { VARIABLES }
    | "container" { CONTAINER }
    | "script" { SCRIPT }
    | "defaults" { DEFAULTS }

    | "{" { LBRACE }
    | "}" { RBRACE }
    | "[" { LSQBRACKET }
    | "]" { RSQBRACKET }
    | "(" { LPAREN }
    | ")" { RPAREN }
    | "=" { EQUAL }
    | "," { COMMA }
    | "+" { PLUS }

    | "#" { singleLineComment lexbuf }
    | "//" { singleLineComment lexbuf }

    | identifier { IDENTIFIER (lexeme lexbuf |> string) }
    | extensionIdentifier { EXTENSION_IDENTIFIER (lexeme lexbuf |> string) }
    | targetIdentifier { TARGET_IDENTIFIER (lexeme lexbuf |> string) }

    | quotedString { 
        let s = lexeme lexbuf |> string
        STRING (s.Substring(1, s.Length-2)) }

    | key {
        let s = lexeme lexbuf |> string
        KEY (s.Substring(0, s.Length-1).TrimEnd()) }

    | variable {
        let s = lexeme lexbuf |> string
        VARIABLE (s.Substring(1, s.Length-1)) }

    | number {
        let s = lexeme lexbuf |> int
        NUMBER (s)
    }

    | whitespace { token lexbuf }
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexbuf }
    | eof { EOF }
    | _ { failwithf "unrecognized input: '%s'" <| lexeme lexbuf }

and singleLineComment = parse
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexbuf }
    | eof { EOF }
    | _ { singleLineComment lexbuf }
