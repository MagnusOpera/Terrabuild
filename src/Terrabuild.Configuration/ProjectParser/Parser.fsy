%{ 
open Terrabuild.Configuration.AST
open Terrabuild.Configuration.Project.AST
open Terrabuild.Expressions


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start Project
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token <string> IDENTIFIER
%token <string> VARIABLE
%token <string> KEY
%token LBRACE RBRACE
%token LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL
%token COMMA
%token PLUS
%token TRIM UPPER LOWER
%token EOF
%token EXTENSION PROJECT TARGET 
%token DEPENDENCIES OUTPUTS IGNORES LABELS CONTAINER INIT SCRIPT DEPENDS_ON DEFAULTS

// associativity and precedences
%left PLUS

%type <Terrabuild.Configuration.Project.AST.Project> Project
%% 

Project:
    | ProjectComponents EOF { $1 }

ProjectComponents:
    | /* empty */ { Project.Empty }
    | ProjectComponents Extension { $1.Patch $2 }
    | ProjectComponents Configuration { $1.Patch $2 }
    | ProjectComponents Target { $1.Patch $2 }


Extension:
    | EXTENSION IDENTIFIER LBRACE ExtensionComponents RBRACE { ProjectComponents.Extension ($2, $4) }
ExtensionComponents:
    | /* empty */ { Extension.Empty }
    | ExtensionComponents Container { $1.Patch $2 }
    | ExtensionComponents Script { $1.Patch $2 }
    | ExtensionComponents Defaults { $1.Patch $2 }
Container:
    | CONTAINER String { ExtensionComponents.Container $2 }
Script:
    | SCRIPT String { ExtensionComponents.Script $2 }
Defaults:
    | DEFAULTS LBRACE Variables RBRACE { ExtensionComponents.Defaults $3 }


Configuration:
    | PROJECT LBRACE ConfigurationComponents RBRACE { ProjectComponents.Configuration $3 }
    | PROJECT IDENTIFIER LBRACE ConfigurationComponents RBRACE { ConfigurationComponents.Init $2 |> $4.Patch |> ProjectComponents.Configuration }
ConfigurationComponents:
    | /* empty */ { Configuration.Empty }
    | ConfigurationComponents ConfigurationDependencies { $1.Patch $2 }
    | ConfigurationComponents ConfigurationOutputs { $1.Patch $2 }
    | ConfigurationComponents ConfigurationIgnores { $1.Patch $2 }
    | ConfigurationComponents ConfigurationLabels { $1.Patch $2 }
ConfigurationDependencies:
    | DEPENDENCIES ListOfString { ConfigurationComponents.Dependencies $2 }
ConfigurationOutputs:
    | OUTPUTS ListOfString { ConfigurationComponents.Outputs $2 }
ConfigurationIgnores:
    | IGNORES ListOfString { ConfigurationComponents.Ignores $2 }
ConfigurationLabels:
    | LABELS ListOfString { ConfigurationComponents.Labels $2 }


Target:
    | TARGET IDENTIFIER LBRACE TargetComponents RBRACE { ProjectComponents.Target ($2, $4) }
TargetComponents:
    | /* empty */ { Target.Empty }
    | TargetComponents DependsOn { $1.Patch $2 }
    | TargetComponents Step { $1.Patch $2 }
DependsOn:
    | DEPENDS_ON ListOfTargets { TargetComponents.DependsOn $2 }
Step:
    | IDENTIFIER IDENTIFIER { TargetComponents.Step { Extension = $1; Command = $2; Parameters = Map.empty } }
    | IDENTIFIER IDENTIFIER LBRACE Variables RBRACE { TargetComponents.Step { Extension = $1; Command = $2; Parameters = $4 } }

String:
    | STRING { $1 }
ListOfString:
    | LSQBRACKET Strings RSQBRACKET { $2 }
Strings:
    | /* empty */ { [] }
    | Strings String { $1 @ [$2] }

ListOfTargets:
    | LSQBRACKET Targets RSQBRACKET { $2 }
Targets:
    | /* empty */ { [] }
    | Targets IDENTIFIER { $1 @ [$2] }

Variables:
    | /* empty */ { Map.empty }        
    | Variables Variable { $1.Add $2 }
Variable:
    | KEY Expr { ($1, $2) }

Expr:
    | NOTHING { Expr.Nothing }
    | TRUE { Expr.Boolean true }
    | FALSE { Expr.Boolean false }
    | STRING { Expr.String $1 }
    | VARIABLE { Expr.Variable $1 }
    | LBRACE Variables RBRACE { Expr.Map $2 }
    | Expr PLUS Expr { Expr.Function (Function.Plus, [$1; $3]) }
    | TRIM LPAREN Expr RPAREN { Expr.Function (Function.Trim, [$3]) }
    | UPPER LPAREN Expr RPAREN { Expr.Function (Function.Upper, [$3]) }
    | LOWER LPAREN Expr RPAREN { Expr.Function (Function.Lower, [$3]) }
