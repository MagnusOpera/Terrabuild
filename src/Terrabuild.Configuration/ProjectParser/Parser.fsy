%{ 
open Terrabuild.Configuration.AST
open Terrabuild.Configuration.Project.AST
open Terrabuild.Expressions


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start ProjectFile
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token <string> IDENTIFIER
%token <string> EXTENSION_IDENTIFIER
%token <string> TARGET_IDENTIFIER
%token <string> VARIABLE
%token <string> KEY
%token <int> NUMBER

%token LBRACE RBRACE
%token DOT_LSQBRACKET DOT_QUESTION_LSQBRACKET LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL NOT_EQUAL
%token COMMA
%token MINUS PLUS
%token TRIM UPPER LOWER REPLACE VERSION DOUBLE_QUESTION QUESTION COLON
%token EOF
%token PROJECT EXTENSION TARGET 
%token DEPENDENCIES LINKS OUTPUTS IGNORES INCLUDES LABELS VARIABLES CONTAINER INIT SCRIPT DEPENDS_ON REBUILD DEFAULTS NAME

// associativity and precedences

%right LSQBRACKET
%left RSQBRACKET
%left COLON
%right QUESTION
%left DOUBLE_QUESTION
%left EQUAL NOT_EQUAL
%left MINUS
%left PLUS
%left DOT_LSQBRACKET DOT_QUESTION_LSQBRACKET

%type <Terrabuild.Configuration.Project.AST.ProjectFile> ProjectFile
%% 

ProjectFile:
    | ProjectFileComponents EOF { ProjectFile.Build $1 }

ProjectFileComponents:
    | /* empty */ { [] }
    | ProjectFileComponents Project { $1 @ [$2] }
    | ProjectFileComponents Extension { $1 @ [$2] }
    | ProjectFileComponents Target { $1 @ [$2] }


Extension:
    | EXTENSION ExtensionIdentifier LBRACE ExtensionComponents RBRACE { Extension.Build $2 $4 |> ProjectFileComponents.Extension }
ExtensionComponents:
    | /* empty */ { [] }
    | ExtensionComponents ExtensionContainer { $1 @ [$2] }
    | ExtensionComponents ExtensionVariables { $1 @ [$2] }
    | ExtensionComponents ExtensionScript { $1 @ [$2] }
    | ExtensionComponents ExtensionDefaults { $1 @ [$2] }
ExtensionContainer:
    | CONTAINER EQUAL String { ExtensionComponents.Container $3 }
ExtensionVariables:
    | VARIABLES EQUAL ListOfString { ExtensionComponents.Variables $3 }
ExtensionScript:
    | SCRIPT EQUAL String { ExtensionComponents.Script $3 }
ExtensionDefaults:
    | DEFAULTS EQUAL ExprMap { ExtensionComponents.Defaults $3 }


Project:
    | PROJECT { Project.Build None [] |> ProjectFileComponents.Project }
    | PROJECT LBRACE ProjectComponents RBRACE { Project.Build None $3 |> ProjectFileComponents.Project }
    | PROJECT ExtensionIdentifier { Project.Build (Some $2) [] |> ProjectFileComponents.Project }
    | PROJECT ExtensionIdentifier LBRACE ProjectComponents RBRACE { Project.Build (Some $2) $4 |> ProjectFileComponents.Project }
ProjectComponents:
    | /* empty */ { [] }
    | ProjectComponents ProjectDependencies { $1 @ [$2] }
    | ProjectComponents ProjectLinks { $1 @ [$2] }
    | ProjectComponents ProjectOutputs { $1 @ [$2] }
    | ProjectComponents ProjectIgnores { $1 @ [$2] }
    | ProjectComponents ProjectIncludes { $1 @ [$2] }
    | ProjectComponents ProjectLabels { $1 @ [$2] }
ProjectDependencies:
    | DEPENDENCIES EQUAL ListOfString { ProjectComponents.Dependencies $3 }
ProjectLinks:
    | LINKS EQUAL ListOfString { ProjectComponents.Links $3 }
ProjectOutputs:
    | OUTPUTS EQUAL ListOfString { ProjectComponents.Outputs $3 }
ProjectIgnores:
    | IGNORES EQUAL ListOfString { ProjectComponents.Ignores $3 }
ProjectIncludes:
    | INCLUDES EQUAL ListOfString { ProjectComponents.Includes $3 }
ProjectLabels:
    | LABELS EQUAL ListOfString { ProjectComponents.Labels $3 }

Target:
    | TARGET IDENTIFIER LBRACE TargetComponents RBRACE { Target.Build $2 $4 |> ProjectFileComponents.Target }
TargetComponents:
    | /* empty */ { [] }
    | TargetComponents TargetDependsOn { $1 @ [$2] }
    | TargetComponents TargetRebuild { $1 @ [$2] }
    | TargetComponents TargetOutputs { $1 @ [$2] }
    | TargetComponents TargetStep { $1 @ [$2] }
TargetDependsOn:
    | DEPENDS_ON EQUAL ListOfTargetIdentifiers { TargetComponents.DependsOn $3 }
TargetRebuild:
    | REBUILD EQUAL Expr { TargetComponents.Rebuild $3 }
TargetOutputs:
    | OUTPUTS EQUAL ListOfString { TargetComponents.Outputs $3 }
TargetStep:
    | ExtensionIdentifier IDENTIFIER { TargetComponents.Step { Extension = $1; Command = $2; Parameters = Map.empty } }
    | ExtensionIdentifier IDENTIFIER ExprMap { TargetComponents.Step { Extension = $1; Command = $2; Parameters = $3 } }

Expr:
    /* scalars */
    | NOTHING { Expr.Nothing }
    | TRUE { Expr.Boolean true }
    | FALSE { Expr.Boolean false }
    | STRING { Expr.String $1 }
    | NUMBER { Expr.Number $1 }
    | VARIABLE { Expr.Variable $1 }
    /* structures */
    | ExprList { Expr.List $1 }
    | ExprMap { Expr.Map $1 }
    /* functions */
    | Expr DOT_LSQBRACKET ExprIndex RSQBRACKET { Expr.Function (Function.Item, [$1; $3]) }
    | Expr DOT_QUESTION_LSQBRACKET ExprIndex RSQBRACKET { Expr.Function (Function.TryItem, [$1; $3]) }
    | Expr EQUAL Expr { Expr.Function (Function.Equal, [$1; $3]) }
    | Expr NOT_EQUAL Expr { Expr.Function (Function.NotEqual, [$1; $3]) }
    | Expr PLUS Expr { Expr.Function (Function.Plus, [$1; $3]) }
    | Expr MINUS Expr { Expr.Function (Function.Minus, [$1; $3]) }
    | TRIM LPAREN Expr RPAREN { Expr.Function (Function.Trim, [$3]) }
    | UPPER LPAREN Expr RPAREN { Expr.Function (Function.Upper, [$3]) }
    | LOWER LPAREN Expr RPAREN { Expr.Function (Function.Lower, [$3]) }
    | REPLACE LPAREN Expr Expr Expr RPAREN { Expr.Function (Function.Replace, [$3; $4; $5]) }
    | VERSION LPAREN Expr RPAREN { Expr.Function (Function.Version, [$3]) }
    | Expr DOUBLE_QUESTION Expr { Expr.Function (Function.Coalesce, [$1; $3]) }
    | Expr QUESTION Expr COLON Expr { Expr.Function (Function.Ternary, [$1; $3; $5] ) }

TargetIdentifier:
    | TARGET_IDENTIFIER { $1 }
    | IDENTIFIER { $1 }

ExtensionIdentifier:
    | EXTENSION_IDENTIFIER { $1 }
    | IDENTIFIER { $1 }

Bool:
    | TRUE { true }
    | FALSE { false }

String:
    | STRING { $1 }

ExprIndex:
    | Expr { $1 }
    | IDENTIFIER { Expr.String $1 }

ExprList:
    | LSQBRACKET ExprListContent RSQBRACKET { $2 }
ExprListContent:
    | /* empty */ { [] }
    | ExprListContent Expr { $1 @ [$2] }

ExprMap:
    | LBRACE ExprMapContent RBRACE { $2 }
ExprMapContent:
    | /* empty */ { Map.empty }
    | ExprMapContent KEY Expr { $1.Add ($2, $3) }

ListOfString:
    | LSQBRACKET Strings RSQBRACKET { $2 }
Strings:
    | /* empty */ { [] }
    | Strings String { $1 @ [$2] }

ListOfIdentifiers:
    | LSQBRACKET Identifiers RSQBRACKET { $2 }
Identifiers:
    | /* empty */ { [] }
    | Identifiers IDENTIFIER { $1 @ [$2] }

ListOfTargetIdentifiers:
    | LSQBRACKET TargetIdentifiers RSQBRACKET { $2 }
TargetIdentifiers:
    | /* empty */ { [] }
    | TargetIdentifiers TargetIdentifier { $1 @ [$2] }
