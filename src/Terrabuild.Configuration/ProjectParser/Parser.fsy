%{ 
open Terrabuild.Configuration.AST
open Terrabuild.Configuration.Project.AST
open Terrabuild.Expressions


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start Project
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token <string> IDENTIFIER
%token <string> VARIABLE
%token <string> KEY
%token <int> NUMBER

%token LBRACE RBRACE
%token LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL
%token COMMA
%token PLUS
%token TRIM UPPER LOWER
%token EOF
%token EXTENSION CONFIGURATION TARGET 
%token DEPENDENCIES OUTPUTS IGNORES LABELS CONTAINER INIT SCRIPT DEPENDS_ON DEFAULTS

// associativity and precedences
%left PLUS

%type <Terrabuild.Configuration.Project.AST.Project> Project
%% 

Project:
    | ProjectComponents EOF { $1 }

ProjectComponents:
    | /* empty */ { Project.Empty }
    | ProjectComponents Extension { $1.Patch $2 }
    | ProjectComponents Configuration { $1.Patch $2 }
    | ProjectComponents Target { $1.Patch $2 }


Extension:
    | EXTENSION IDENTIFIER LBRACE ExtensionComponents RBRACE { ProjectComponents.Extension ($2, $4) }
ExtensionComponents:
    | /* empty */ { Extension.Empty }
    | ExtensionComponents ExtensionContainer { $1.Patch $2 }
    | ExtensionComponents ExtensionScript { $1.Patch $2 }
    | ExtensionComponents ExtensionDefaults { $1.Patch $2 }
ExtensionContainer:
    | CONTAINER EQUAL String { ExtensionComponents.Container $3 }
ExtensionScript:
    | SCRIPT EQUAL String { ExtensionComponents.Script $3 }
ExtensionDefaults:
    | DEFAULTS EQUAL LBRACE Variables RBRACE { ExtensionComponents.Defaults $4 }


Configuration:
    | CONFIGURATION LBRACE ConfigurationComponents RBRACE { ProjectComponents.Configuration $3 }
    | CONFIGURATION IDENTIFIER { ConfigurationComponents.Init $2 |> Configuration.Empty.Patch |> ProjectComponents.Configuration }
    | CONFIGURATION IDENTIFIER LBRACE ConfigurationComponents RBRACE { ConfigurationComponents.Init $2 |> $4.Patch |> ProjectComponents.Configuration }
ConfigurationComponents:
    | /* empty */ { Configuration.Empty }
    | ConfigurationComponents ConfigurationDependencies { $1.Patch $2 }
    | ConfigurationComponents ConfigurationOutputs { $1.Patch $2 }
    | ConfigurationComponents ConfigurationIgnores { $1.Patch $2 }
    | ConfigurationComponents ConfigurationLabels { $1.Patch $2 }
ConfigurationDependencies:
    | DEPENDENCIES EQUAL ListOfString { ConfigurationComponents.Dependencies $3 }
ConfigurationOutputs:
    | OUTPUTS EQUAL ListOfString { ConfigurationComponents.Outputs $3 }
ConfigurationIgnores:
    | IGNORES EQUAL ListOfString { ConfigurationComponents.Ignores $3 }
ConfigurationLabels:
    | LABELS EQUAL ListOfString { ConfigurationComponents.Labels $3 }


Target:
    | TARGET IDENTIFIER LBRACE TargetComponents RBRACE { ProjectComponents.Target ($2, $4) }
TargetComponents:
    | /* empty */ { Target.Empty }
    | TargetComponents TargetDependsOn { $1.Patch $2 }
    | TargetComponents TargetOutputs { $1.Patch $2 }
    | TargetComponents TargetStep { $1.Patch $2 }
TargetDependsOn:
    | DEPENDS_ON EQUAL ListOfIdentifiers { TargetComponents.DependsOn $3 }
TargetOutputs:
    | OUTPUTS EQUAL ListOfString { TargetComponents.Outputs $3 }
TargetStep:
    | IDENTIFIER IDENTIFIER { TargetComponents.Step { Extension = $1; Command = $2; Parameters = Map.empty } }
    | IDENTIFIER IDENTIFIER LBRACE Variables RBRACE { TargetComponents.Step { Extension = $1; Command = $2; Parameters = $4 } }

String:
    | STRING { $1 }
ListOfString:
    | LSQBRACKET Strings RSQBRACKET { $2 }
Strings:
    | /* empty */ { [] }
    | Strings String { $1 @ [$2] }

ListOfIdentifiers:
    | LSQBRACKET Identifiers RSQBRACKET { $2 }
Identifiers:
    | /* empty */ { [] }
    | Identifiers IDENTIFIER { $1 @ [$2] }

Variables:
    | /* empty */ { Map.empty }        
    | Variables Variable { $1.Add $2 }
Variable:
    | KEY Expr { ($1, $2) }

Expr:
    | NOTHING { Expr.Nothing }
    | TRUE { Expr.Boolean true }
    | FALSE { Expr.Boolean false }
    | STRING { Expr.String $1 }
    | NUMBER { Expr.Number $1 }
    | VARIABLE { Expr.Variable $1 }
    | LBRACE Variables RBRACE { Expr.Map $2 }
    | Expr PLUS Expr { Expr.Function (Function.Plus, [$1; $3]) }
    | TRIM LPAREN Expr RPAREN { Expr.Function (Function.Trim, [$3]) }
    | UPPER LPAREN Expr RPAREN { Expr.Function (Function.Upper, [$3]) }
    | LOWER LPAREN Expr RPAREN { Expr.Function (Function.Lower, [$3]) }
