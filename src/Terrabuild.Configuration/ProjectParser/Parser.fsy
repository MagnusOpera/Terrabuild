%{ 
open Terrabuild.Configuration.AST
open Terrabuild.Configuration.Project.AST
open Terrabuild.Expressions


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start ProjectFile
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token <string> IDENTIFIER
%token <string> EXTENSION_IDENTIFIER
%token <string> TARGET_IDENTIFIER
%token <string> VARIABLE
%token <string> KEY
%token <int> NUMBER

%token LBRACE RBRACE
%token DOT_LSQBRACKET LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL
%token COMMA
%token MINUS PLUS
%token TRIM UPPER LOWER VERSION COALESCE
%token EOF
%token PROJECT EXTENSION TARGET 
%token DEPENDENCIES OUTPUTS IGNORES LABELS VARIABLES CONTAINER INIT SCRIPT DEPENDS_ON REBUILD DEFAULTS

// associativity and precedences
%left PLUS

%type <Terrabuild.Configuration.Project.AST.ProjectFile> ProjectFile
%% 

ProjectFile:
    | ProjectFileComponents EOF { $1 }

ProjectFileComponents:
    | /* empty */ { ProjectFile.Empty }
    | ProjectFileComponents Project { $1.Patch $2 }
    | ProjectFileComponents Extension { $1.Patch $2 }
    | ProjectFileComponents Target { $1.Patch $2 }


Extension:
    | EXTENSION ExtensionIdentifier LBRACE ExtensionComponents RBRACE { ProjectFileComponents.Extension ($2, $4) }
ExtensionComponents:
    | /* empty */ { Extension.Empty }
    | ExtensionComponents ExtensionContainer { $1.Patch $2 }
    | ExtensionComponents ExtensionVariables { $1.Patch $2 }
    | ExtensionComponents ExtensionScript { $1.Patch $2 }
    | ExtensionComponents ExtensionDefaults { $1.Patch $2 }
ExtensionContainer:
    | CONTAINER EQUAL String { ExtensionComponents.Container $3 }
ExtensionVariables:
    | VARIABLES EQUAL ListOfString { ExtensionComponents.Variables $3 }
ExtensionScript:
    | SCRIPT EQUAL String { ExtensionComponents.Script $3 }
ExtensionDefaults:
    | DEFAULTS EQUAL ExprMap { ExtensionComponents.Defaults $3 }


Project:
    | PROJECT LBRACE ProjectComponents RBRACE { ProjectFileComponents.Project $3 }
    | PROJECT ExtensionIdentifier LBRACE ProjectComponents RBRACE { ProjectComponents.Init $2 |> $4.Patch |> ProjectFileComponents.Project }
    | PROJECT ExtensionIdentifier { ProjectComponents.Init $2 |> Project.Empty.Patch |> ProjectFileComponents.Project }
ProjectComponents:
    | /* empty */ { Project.Empty }
    | ProjectComponents ProjectDependencies { $1.Patch $2 }
    | ProjectComponents ProjectOutputs { $1.Patch $2 }
    | ProjectComponents ProjectIgnores { $1.Patch $2 }
    | ProjectComponents ProjectLabels { $1.Patch $2 }
ProjectDependencies:
    | DEPENDENCIES EQUAL ListOfString { ProjectComponents.Dependencies $3 }
ProjectOutputs:
    | OUTPUTS EQUAL ListOfString { ProjectComponents.Outputs $3 }
ProjectIgnores:
    | IGNORES EQUAL ListOfString { ProjectComponents.Ignores $3 }
ProjectLabels:
    | LABELS EQUAL ListOfString { ProjectComponents.Labels $3 }


Target:
    | TARGET IDENTIFIER LBRACE TargetComponents RBRACE { ProjectFileComponents.Target ($2, $4) }
TargetComponents:
    | /* empty */ { Target.Empty }
    | TargetComponents TargetDependsOn { $1.Patch $2 }
    | TargetComponents TargetRebuild { $1.Patch $2 }
    | TargetComponents TargetOutputs { $1.Patch $2 }
    | TargetComponents TargetStep { $1.Patch $2 }
TargetDependsOn:
    | DEPENDS_ON EQUAL ListOfTargetIdentifiers { TargetComponents.DependsOn $3 }
TargetRebuild:
    | REBUILD EQUAL Bool { TargetComponents.Rebuild $3 }
TargetOutputs:
    | OUTPUTS EQUAL ListOfString { TargetComponents.Outputs $3 }
TargetStep:
    | ExtensionIdentifier IDENTIFIER { TargetComponents.Step { Extension = $1; Command = $2; Parameters = Map.empty } }
    | ExtensionIdentifier IDENTIFIER ExprMap { TargetComponents.Step { Extension = $1; Command = $2; Parameters = $3 } }

Bool:
    | TRUE { true }
    | FALSE { false }

String:
    | STRING { $1 }
ListOfString:
    | LSQBRACKET Strings RSQBRACKET { $2 }
Strings:
    | /* empty */ { [] }
    | Strings String { $1 @ [$2] }

ListOfTargetIdentifiers:
    | LSQBRACKET TargetIdentifiers RSQBRACKET { $2 }
TargetIdentifiers:
    | /* empty */ { [] }
    | TargetIdentifiers TargetIdentifier { $1 @ [$2] }

TargetIdentifier:
    | TARGET_IDENTIFIER { $1 }
    | IDENTIFIER { $1 }

ExtensionIdentifier:
    | EXTENSION_IDENTIFIER { $1 }
    | IDENTIFIER { $1 }

Expr:
    /* scalars */
    | NOTHING { Expr.Nothing }
    | TRUE { Expr.Boolean true }
    | FALSE { Expr.Boolean false }
    | STRING { Expr.String $1 }
    | NUMBER { Expr.Number $1 }
    | VARIABLE { Expr.Variable $1 }
    /* structures */
    | ExprList { Expr.List $1 }
    | ExprMap { Expr.Map $1 }
    /* functions */
    | Expr PLUS Expr { Expr.Function (Function.Plus, [$1; $3]) }
    | Expr MINUS Expr { Expr.Function (Function.Minus, [$1; $3]) }
    | TRIM LPAREN Expr RPAREN { Expr.Function (Function.Trim, [$3]) }
    | UPPER LPAREN Expr RPAREN { Expr.Function (Function.Upper, [$3]) }
    | LOWER LPAREN Expr RPAREN { Expr.Function (Function.Lower, [$3]) }
    | VERSION LPAREN Expr RPAREN { Expr.Function (Function.Version, [$3]) }
    | Expr DOT_LSQBRACKET ExprIndex RSQBRACKET { Expr.Function (Function.Item, [$1; $3]) }
    | Expr COALESCE Expr { Expr.Function (Function.Coalesce, [$1; $3]) }

ExprIndex:
    | Expr { $1 }
    | IDENTIFIER { Expr.String $1 }

ExprList:
    | LSQBRACKET ExprListContent RSQBRACKET { $2 }
ExprListContent:
    | /* empty */ { [] }
    | ExprListContent Expr { $1 @ [$2] }

ExprMap:
    | LBRACE ExprMapContent RBRACE { $2 }
ExprMapContent:
    | /* empty */ { Map.empty }
    | ExprMapContent KEY Expr { $1.Add ($2, $3) }
