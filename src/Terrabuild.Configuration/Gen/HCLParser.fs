// Implementation file for parser generated by fsyacc
module internal Parser.HCL
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "HCLParser/Parser.fsy"
 
open Terrabuild.Configuration.AST
open Terrabuild.Configuration.AST.HCL
open Terrabuild.Expressions
open System


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif


# 21 "Gen/HCLParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DOUBLE_QUESTION
  | QUESTION
  | COLON
  | BANG
  | AND
  | OR
  | TRIM
  | UPPER
  | LOWER
  | REPLACE
  | COUNT
  | VERSION
  | FORMAT
  | TOSTRING
  | MINUS
  | PLUS
  | COMMA
  | EQUAL
  | DOUBLE_EQUAL
  | NOT_EQUAL
  | LPAREN
  | RPAREN
  | DOT
  | DOT_QUESTION
  | LSQBRACKET
  | RSQBRACKET
  | LBRACE
  | RBRACE
  | NUMBER of (int)
  | KEY of (string)
  | IDENTIFIER of (string)
  | EXPRESSION_END
  | EXPRESSION_START of (string)
  | STRING_END of (string)
  | STRING_START
  | STRING of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOUBLE_QUESTION
    | TOKEN_QUESTION
    | TOKEN_COLON
    | TOKEN_BANG
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TRIM
    | TOKEN_UPPER
    | TOKEN_LOWER
    | TOKEN_REPLACE
    | TOKEN_COUNT
    | TOKEN_VERSION
    | TOKEN_FORMAT
    | TOKEN_TOSTRING
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_COMMA
    | TOKEN_EQUAL
    | TOKEN_DOUBLE_EQUAL
    | TOKEN_NOT_EQUAL
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_DOT
    | TOKEN_DOT_QUESTION
    | TOKEN_LSQBRACKET
    | TOKEN_RSQBRACKET
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_NUMBER
    | TOKEN_KEY
    | TOKEN_IDENTIFIER
    | TOKEN_EXPRESSION_END
    | TOKEN_EXPRESSION_START
    | TOKEN_STRING_END
    | TOKEN_STRING_START
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startFile
    | NONTERM_File
    | NONTERM_Blocks
    | NONTERM_Block
    | NONTERM_BlockComponents
    | NONTERM_BlockComponent
    | NONTERM_Expr
    | NONTERM_ExprIndex
    | NONTERM_ExprIdentifier
    | NONTERM_String
    | NONTERM_ExprTuple
    | NONTERM_ExprTupleContent
    | NONTERM_ExprList
    | NONTERM_ExprListContent
    | NONTERM_ExprMap
    | NONTERM_ExprMapContent

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DOUBLE_QUESTION  -> 1 
  | QUESTION  -> 2 
  | COLON  -> 3 
  | BANG  -> 4 
  | AND  -> 5 
  | OR  -> 6 
  | TRIM  -> 7 
  | UPPER  -> 8 
  | LOWER  -> 9 
  | REPLACE  -> 10 
  | COUNT  -> 11 
  | VERSION  -> 12 
  | FORMAT  -> 13 
  | TOSTRING  -> 14 
  | MINUS  -> 15 
  | PLUS  -> 16 
  | COMMA  -> 17 
  | EQUAL  -> 18 
  | DOUBLE_EQUAL  -> 19 
  | NOT_EQUAL  -> 20 
  | LPAREN  -> 21 
  | RPAREN  -> 22 
  | DOT  -> 23 
  | DOT_QUESTION  -> 24 
  | LSQBRACKET  -> 25 
  | RSQBRACKET  -> 26 
  | LBRACE  -> 27 
  | RBRACE  -> 28 
  | NUMBER _ -> 29 
  | KEY _ -> 30 
  | IDENTIFIER _ -> 31 
  | EXPRESSION_END  -> 32 
  | EXPRESSION_START _ -> 33 
  | STRING_END _ -> 34 
  | STRING_START  -> 35 
  | STRING _ -> 36 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DOUBLE_QUESTION 
  | 2 -> TOKEN_QUESTION 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_BANG 
  | 5 -> TOKEN_AND 
  | 6 -> TOKEN_OR 
  | 7 -> TOKEN_TRIM 
  | 8 -> TOKEN_UPPER 
  | 9 -> TOKEN_LOWER 
  | 10 -> TOKEN_REPLACE 
  | 11 -> TOKEN_COUNT 
  | 12 -> TOKEN_VERSION 
  | 13 -> TOKEN_FORMAT 
  | 14 -> TOKEN_TOSTRING 
  | 15 -> TOKEN_MINUS 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_COMMA 
  | 18 -> TOKEN_EQUAL 
  | 19 -> TOKEN_DOUBLE_EQUAL 
  | 20 -> TOKEN_NOT_EQUAL 
  | 21 -> TOKEN_LPAREN 
  | 22 -> TOKEN_RPAREN 
  | 23 -> TOKEN_DOT 
  | 24 -> TOKEN_DOT_QUESTION 
  | 25 -> TOKEN_LSQBRACKET 
  | 26 -> TOKEN_RSQBRACKET 
  | 27 -> TOKEN_LBRACE 
  | 28 -> TOKEN_RBRACE 
  | 29 -> TOKEN_NUMBER 
  | 30 -> TOKEN_KEY 
  | 31 -> TOKEN_IDENTIFIER 
  | 32 -> TOKEN_EXPRESSION_END 
  | 33 -> TOKEN_EXPRESSION_START 
  | 34 -> TOKEN_STRING_END 
  | 35 -> TOKEN_STRING_START 
  | 36 -> TOKEN_STRING 
  | 39 -> TOKEN_end_of_input
  | 37 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startFile 
    | 1 -> NONTERM_File 
    | 2 -> NONTERM_Blocks 
    | 3 -> NONTERM_Blocks 
    | 4 -> NONTERM_Block 
    | 5 -> NONTERM_Block 
    | 6 -> NONTERM_BlockComponents 
    | 7 -> NONTERM_BlockComponents 
    | 8 -> NONTERM_BlockComponent 
    | 9 -> NONTERM_BlockComponent 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_Expr 
    | 30 -> NONTERM_Expr 
    | 31 -> NONTERM_Expr 
    | 32 -> NONTERM_Expr 
    | 33 -> NONTERM_Expr 
    | 34 -> NONTERM_ExprIndex 
    | 35 -> NONTERM_ExprIndex 
    | 36 -> NONTERM_ExprIdentifier 
    | 37 -> NONTERM_String 
    | 38 -> NONTERM_String 
    | 39 -> NONTERM_ExprTuple 
    | 40 -> NONTERM_ExprTupleContent 
    | 41 -> NONTERM_ExprTupleContent 
    | 42 -> NONTERM_ExprTupleContent 
    | 43 -> NONTERM_ExprList 
    | 44 -> NONTERM_ExprListContent 
    | 45 -> NONTERM_ExprListContent 
    | 46 -> NONTERM_ExprMap 
    | 47 -> NONTERM_ExprMapContent 
    | 48 -> NONTERM_ExprMapContent 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 39 
let _fsyacc_tagOfErrorTerminal = 37

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DOUBLE_QUESTION  -> "DOUBLE_QUESTION" 
  | QUESTION  -> "QUESTION" 
  | COLON  -> "COLON" 
  | BANG  -> "BANG" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | TRIM  -> "TRIM" 
  | UPPER  -> "UPPER" 
  | LOWER  -> "LOWER" 
  | REPLACE  -> "REPLACE" 
  | COUNT  -> "COUNT" 
  | VERSION  -> "VERSION" 
  | FORMAT  -> "FORMAT" 
  | TOSTRING  -> "TOSTRING" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | COMMA  -> "COMMA" 
  | EQUAL  -> "EQUAL" 
  | DOUBLE_EQUAL  -> "DOUBLE_EQUAL" 
  | NOT_EQUAL  -> "NOT_EQUAL" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | DOT  -> "DOT" 
  | DOT_QUESTION  -> "DOT_QUESTION" 
  | LSQBRACKET  -> "LSQBRACKET" 
  | RSQBRACKET  -> "RSQBRACKET" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | NUMBER _ -> "NUMBER" 
  | KEY _ -> "KEY" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | EXPRESSION_END  -> "EXPRESSION_END" 
  | EXPRESSION_START _ -> "EXPRESSION_START" 
  | STRING_END _ -> "STRING_END" 
  | STRING_START  -> "STRING_START" 
  | STRING _ -> "STRING" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DOUBLE_QUESTION  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TRIM  -> (null : System.Object) 
  | UPPER  -> (null : System.Object) 
  | LOWER  -> (null : System.Object) 
  | REPLACE  -> (null : System.Object) 
  | COUNT  -> (null : System.Object) 
  | VERSION  -> (null : System.Object) 
  | FORMAT  -> (null : System.Object) 
  | TOSTRING  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | DOUBLE_EQUAL  -> (null : System.Object) 
  | NOT_EQUAL  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | DOT_QUESTION  -> (null : System.Object) 
  | LSQBRACKET  -> (null : System.Object) 
  | RSQBRACKET  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KEY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EXPRESSION_END  -> (null : System.Object) 
  | EXPRESSION_START _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_END _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_START  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;3us;65535us;2us;4us;8us;17us;12us;17us;2us;65535us;7us;8us;11us;12us;2us;65535us;8us;14us;12us;14us;17us;65535us;15us;16us;43us;23us;44us;24us;45us;25us;46us;26us;47us;27us;48us;28us;65us;29us;66us;30us;67us;31us;68us;32us;72us;33us;74us;34us;76us;35us;79us;36us;81us;37us;86us;38us;2us;65535us;39us;40us;41us;42us;17us;65535us;15us;21us;43us;21us;44us;21us;45us;21us;46us;21us;47us;21us;48us;21us;65us;21us;66us;21us;67us;21us;68us;21us;72us;21us;74us;21us;76us;21us;79us;21us;81us;21us;86us;21us;17us;65535us;15us;22us;43us;22us;44us;22us;45us;22us;46us;22us;47us;22us;48us;22us;65us;22us;66us;22us;67us;22us;68us;22us;72us;22us;74us;22us;76us;22us;79us;22us;81us;22us;86us;22us;8us;65535us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;62us;63us;64us;1us;65535us;76us;77us;17us;65535us;15us;18us;43us;18us;44us;18us;45us;18us;46us;18us;47us;18us;48us;18us;65us;18us;66us;18us;67us;18us;68us;18us;72us;18us;74us;18us;76us;18us;79us;18us;81us;18us;86us;18us;1us;65535us;80us;81us;17us;65535us;15us;19us;43us;19us;44us;19us;45us;19us;46us;19us;47us;19us;48us;19us;65us;19us;66us;19us;67us;19us;68us;19us;72us;19us;74us;19us;76us;19us;79us;19us;81us;19us;86us;19us;1us;65535us;83us;84us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;9us;12us;15us;33us;36us;54us;72us;81us;83us;101us;103us;121us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;3us;1us;1us;1us;3us;2us;4us;5us;3us;4us;5us;8us;1us;4us;2us;4us;7us;1us;4us;1us;5us;1us;5us;2us;5us;7us;1us;5us;1us;7us;1us;8us;11us;8us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;2us;14us;38us;11us;15us;16us;17us;17us;18us;19us;20us;21us;22us;31us;32us;11us;15us;16us;17us;18us;18us;19us;20us;21us;22us;31us;32us;11us;15us;16us;17us;18us;19us;19us;20us;21us;22us;31us;32us;11us;15us;16us;17us;18us;19us;20us;20us;21us;22us;31us;32us;11us;15us;16us;17us;18us;19us;20us;21us;21us;22us;31us;32us;11us;15us;16us;17us;18us;19us;20us;21us;22us;22us;31us;32us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;31us;32us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;32us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;32us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;33us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;37us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;38us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;41us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;42us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;45us;11us;15us;16us;17us;18us;19us;20us;21us;22us;31us;32us;48us;1us;15us;1us;15us;1us;16us;1us;16us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;1us;23us;1us;23us;1us;24us;1us;24us;1us;25us;1us;25us;1us;26us;1us;26us;1us;27us;1us;27us;1us;28us;1us;28us;1us;29us;1us;29us;1us;30us;1us;30us;1us;31us;1us;32us;1us;32us;1us;33us;1us;34us;1us;35us;1us;36us;1us;37us;1us;37us;1us;38us;1us;38us;1us;39us;2us;39us;42us;1us;39us;1us;42us;1us;43us;2us;43us;45us;1us;43us;1us;46us;2us;46us;48us;1us;46us;1us;48us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;14us;18us;20us;23us;25us;27us;29us;32us;34us;36us;38us;50us;52us;54us;56us;58us;60us;63us;75us;87us;99us;111us;123us;135us;147us;159us;171us;183us;195us;207us;219us;231us;243us;255us;257us;259us;261us;263us;265us;267us;269us;271us;273us;275us;277us;279us;281us;283us;285us;287us;289us;291us;293us;295us;297us;299us;301us;303us;305us;307us;309us;311us;313us;315us;317us;319us;321us;323us;325us;327us;329us;331us;334us;336us;338us;340us;343us;345us;347us;350us;352us;|]
let _fsyacc_action_rows = 87
let _fsyacc_actionTableElements = [|0us;16386us;0us;49152us;2us;32768us;0us;3us;31us;5us;0us;16385us;0us;16387us;2us;32768us;27us;7us;31us;10us;3us;32768us;18us;15us;27us;7us;31us;10us;0us;16390us;2us;32768us;28us;9us;31us;6us;0us;16388us;1us;32768us;27us;11us;0us;16390us;2us;32768us;28us;13us;31us;6us;0us;16389us;0us;16391us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;10us;16392us;1us;65us;2us;66us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;0us;16393us;0us;16394us;0us;16395us;0us;16396us;0us;16397us;1us;16398us;33us;74us;6us;16401us;5us;47us;6us;48us;15us;46us;16us;45us;23us;39us;24us;41us;6us;16402us;5us;47us;6us;48us;15us;46us;16us;45us;23us;39us;24us;41us;4us;16403us;5us;47us;6us;48us;23us;39us;24us;41us;4us;16404us;5us;47us;6us;48us;23us;39us;24us;41us;2us;16405us;23us;39us;24us;41us;2us;16406us;23us;39us;24us;41us;8us;16415us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;11us;32768us;1us;65us;2us;66us;3us;67us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;10us;16416us;1us;65us;2us;66us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;0us;16417us;11us;32768us;1us;65us;2us;66us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;32us;73us;11us;32768us;1us;65us;2us;66us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;32us;75us;10us;16425us;1us;65us;2us;66us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;10us;16426us;1us;65us;2us;66us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;10us;16429us;1us;65us;2us;66us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;10us;16432us;1us;65us;2us;66us;5us;47us;6us;48us;15us;46us;16us;45us;19us;43us;20us;44us;23us;39us;24us;41us;2us;32768us;29us;69us;31us;70us;0us;16399us;2us;32768us;29us;69us;31us;70us;0us;16400us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;1us;32768us;21us;76us;0us;16407us;1us;32768us;21us;76us;0us;16408us;1us;32768us;21us;76us;0us;16409us;1us;32768us;21us;76us;0us;16410us;1us;32768us;21us;76us;0us;16411us;1us;32768us;21us;76us;0us;16412us;1us;32768us;21us;76us;0us;16413us;1us;32768us;21us;76us;0us;16414us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;0us;16418us;0us;16419us;0us;16420us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;0us;16421us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;0us;16422us;14us;16424us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;2us;32768us;17us;79us;22us;78us;0us;16423us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;0us;16428us;15us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;26us;82us;27us;83us;29us;20us;31us;71us;33us;72us;0us;16427us;0us;16431us;2us;32768us;28us;85us;30us;86us;0us;16430us;14us;32768us;4us;68us;7us;49us;8us;51us;9us;53us;10us;55us;11us;57us;12us;59us;13us;61us;14us;63us;25us;80us;27us;83us;29us;20us;31us;71us;33us;72us;|]
let _fsyacc_actionTableRowOffsets = [|0us;1us;2us;5us;6us;7us;10us;14us;15us;18us;19us;21us;22us;25us;26us;27us;42us;53us;54us;55us;56us;57us;58us;60us;67us;74us;79us;84us;87us;90us;99us;111us;122us;123us;135us;147us;158us;169us;180us;191us;194us;195us;198us;199us;214us;229us;244us;259us;274us;289us;291us;292us;294us;295us;297us;298us;300us;301us;303us;304us;306us;307us;309us;310us;312us;313us;328us;343us;358us;373us;374us;375us;376us;391us;392us;407us;408us;423us;426us;427us;442us;443us;459us;460us;461us;464us;465us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;0us;2us;4us;5us;0us;2us;3us;1us;1us;1us;1us;1us;1us;3us;3us;3us;3us;3us;3us;3us;3us;2us;2us;2us;2us;2us;2us;2us;2us;3us;5us;2us;1us;1us;1us;3us;4us;3us;0us;1us;3us;3us;0us;2us;3us;0us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;4us;5us;5us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;7us;7us;8us;9us;9us;10us;11us;11us;11us;12us;13us;13us;14us;15us;15us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16387us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;65535us;16389us;16391us;65535us;65535us;16393us;16394us;16395us;16396us;16397us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16399us;65535us;16400us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16407us;65535us;16408us;65535us;16409us;65535us;16410us;65535us;16411us;65535us;16412us;65535us;16413us;65535us;16414us;65535us;65535us;65535us;65535us;16418us;16419us;16420us;65535us;16421us;65535us;16422us;65535us;65535us;16423us;65535us;65535us;65535us;16427us;65535us;65535us;16430us;65535us;|]
let _fsyacc_reductions = lazy [|
# 355 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Terrabuild.Configuration.AST.HCL.File in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startFile));
# 364 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "HCLParser/Parser.fsy"
                                        File.Build _1 
                   )
# 55 "HCLParser/Parser.fsy"
                 : Terrabuild.Configuration.AST.HCL.File));
# 375 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 58 "HCLParser/Parser.fsy"
                 : 'gentype_Blocks));
# 385 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Blocks in
            let _2 = parseState.GetInput(2) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "HCLParser/Parser.fsy"
                                          _1 @ [_2] 
                   )
# 59 "HCLParser/Parser.fsy"
                 : 'gentype_Blocks));
# 397 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_BlockComponents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "HCLParser/Parser.fsy"
                                                                      Block.Build _1 None _3 
                   )
# 62 "HCLParser/Parser.fsy"
                 : 'gentype_Block));
# 409 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_BlockComponents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "HCLParser/Parser.fsy"
                                                                                 Block.Build _1 (Some _2) _4 
                   )
# 63 "HCLParser/Parser.fsy"
                 : 'gentype_Block));
# 422 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 66 "HCLParser/Parser.fsy"
                 : 'gentype_BlockComponents));
# 432 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_BlockComponents in
            let _2 = parseState.GetInput(2) :?> 'gentype_BlockComponent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "HCLParser/Parser.fsy"
                                                            _1 @ [_2] 
                   )
# 67 "HCLParser/Parser.fsy"
                 : 'gentype_BlockComponents));
# 444 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "HCLParser/Parser.fsy"
                                                   Attribute.Build _1 _3 |> BlockComponents.Attribute 
                   )
# 70 "HCLParser/Parser.fsy"
                 : 'gentype_BlockComponent));
# 456 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "HCLParser/Parser.fsy"
                                   _1 |> BlockComponents.Block 
                   )
# 71 "HCLParser/Parser.fsy"
                 : 'gentype_BlockComponent));
# 467 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "HCLParser/Parser.fsy"
                                      Expr.List _1 
                   )
# 75 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 478 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprMap in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "HCLParser/Parser.fsy"
                                     Expr.Map _1 
                   )
# 76 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 489 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "HCLParser/Parser.fsy"
                                    Expr.Number _1 
                   )
# 78 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 500 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprIdentifier in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "HCLParser/Parser.fsy"
                                            _1 
                   )
# 79 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 511 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "HCLParser/Parser.fsy"
                                    _1 
                   )
# 80 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 522 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_ExprIndex in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "HCLParser/Parser.fsy"
                                                Expr.Function (Function.Item, [_1;  _3]) 
                   )
# 82 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 534 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_ExprIndex in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "HCLParser/Parser.fsy"
                                                         Expr.Function (Function.TryItem, [_1; _3]) 
                   )
# 83 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 546 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "HCLParser/Parser.fsy"
                                                    Expr.Function (Function.Equal, [_1; _3]) 
                   )
# 84 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 558 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "HCLParser/Parser.fsy"
                                                 Expr.Function (Function.NotEqual, [_1; _3]) 
                   )
# 85 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 570 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "HCLParser/Parser.fsy"
                                            Expr.Function (Function.Plus, [_1; _3]) 
                   )
# 86 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 582 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "HCLParser/Parser.fsy"
                                             Expr.Function (Function.Minus, [_1; _3]) 
                   )
# 87 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 594 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "HCLParser/Parser.fsy"
                                           Expr.Function (Function.And, [_1; _3]) 
                   )
# 88 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 606 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "HCLParser/Parser.fsy"
                                          Expr.Function (Function.Or, [_1; _3]) 
                   )
# 89 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 618 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "HCLParser/Parser.fsy"
                                            Expr.Function (Function.Trim, _2) 
                   )
# 90 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 629 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "HCLParser/Parser.fsy"
                                             Expr.Function (Function.Upper, _2) 
                   )
# 91 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 640 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "HCLParser/Parser.fsy"
                                             Expr.Function (Function.Lower, _2) 
                   )
# 92 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 651 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "HCLParser/Parser.fsy"
                                               Expr.Function (Function.Replace, _2) 
                   )
# 93 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 662 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "HCLParser/Parser.fsy"
                                             Expr.Function (Function.Count, _2)
                   )
# 94 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 673 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "HCLParser/Parser.fsy"
                                               Expr.Function (Function.Version, _2) 
                   )
# 95 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 684 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "HCLParser/Parser.fsy"
                                              Expr.Function (Function.Format, _2) 
                   )
# 96 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 695 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "HCLParser/Parser.fsy"
                                                Expr.Function (Function.ToString, _2) 
                   )
# 97 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 706 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "HCLParser/Parser.fsy"
                                                       Expr.Function (Function.Coalesce, [_1; _3]) 
                   )
# 98 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 718 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "HCLParser/Parser.fsy"
                                                           Expr.Function (Function.Ternary, [_1; _3; _5] ) 
                   )
# 99 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 731 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "HCLParser/Parser.fsy"
                                       Expr.Function (Function.Not, [_2]) 
                   )
# 100 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 742 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "HCLParser/Parser.fsy"
                                    Expr.Number _1 
                   )
# 103 "HCLParser/Parser.fsy"
                 : 'gentype_ExprIndex));
# 753 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "HCLParser/Parser.fsy"
                                        Expr.String _1 
                   )
# 104 "HCLParser/Parser.fsy"
                 : 'gentype_ExprIndex));
# 764 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "HCLParser/Parser.fsy"
                                        
                             match _1 with
                             | "true" -> Expr.Bool true
                             | "false" -> Expr.Bool false
                             | "nothing" -> Expr.Nothing
                             | _ -> Expr.Variable _1
                         
                   )
# 107 "HCLParser/Parser.fsy"
                 : 'gentype_ExprIdentifier));
# 781 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "HCLParser/Parser.fsy"
                                                                  
                             if _1 |> String.IsNullOrEmpty then _2
                             else Expr.Function (Function.Format, [Expr.String "{0}{1}"; Expr.String _1; _2])
                         
                   )
# 116 "HCLParser/Parser.fsy"
                 : 'gentype_String));
# 796 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_String in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "HCLParser/Parser.fsy"
                                                                        
                             if _2 |> String.IsNullOrEmpty then Expr.Function (Function.Format, [Expr.String "{0}{1}"; _1; _3])
                             else Expr.Function (Function.Format, [Expr.String "{0}{1}{2}"; _1; Expr.String _2; _3])
                         
                   )
# 120 "HCLParser/Parser.fsy"
                 : 'gentype_String));
# 812 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTupleContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "HCLParser/Parser.fsy"
                                                            _2 
                   )
# 126 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTuple));
# 823 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 128 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTupleContent));
# 833 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "HCLParser/Parser.fsy"
                                  [_1] 
                   )
# 129 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTupleContent));
# 844 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprTupleContent in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "HCLParser/Parser.fsy"
                                                         _1 @ [_3] 
                   )
# 130 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTupleContent));
# 856 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprListContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "HCLParser/Parser.fsy"
                                                                   _2 
                   )
# 133 "HCLParser/Parser.fsy"
                 : 'gentype_ExprList));
# 867 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 135 "HCLParser/Parser.fsy"
                 : 'gentype_ExprListContent));
# 877 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprListContent in
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "HCLParser/Parser.fsy"
                                                  _1 @ [_2] 
                   )
# 136 "HCLParser/Parser.fsy"
                 : 'gentype_ExprListContent));
# 889 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprMapContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "HCLParser/Parser.fsy"
                                                          _2 
                   )
# 139 "HCLParser/Parser.fsy"
                 : 'gentype_ExprMap));
# 900 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "HCLParser/Parser.fsy"
                                         Map.empty 
                   )
# 141 "HCLParser/Parser.fsy"
                 : 'gentype_ExprMapContent));
# 910 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprMapContent in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "HCLParser/Parser.fsy"
                                                     _1.Add (_2, _3) 
                   )
# 142 "HCLParser/Parser.fsy"
                 : 'gentype_ExprMapContent));
|]
# 924 "Gen/HCLParser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 40;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let File lexer lexbuf : Terrabuild.Configuration.AST.HCL.File =
    engine lexer lexbuf 0 :?> _
