// Implementation file for parser generated by fsyacc
module internal Parser.HCL
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "HCLParser/Parser.fsy"
 
open Terrabuild.Configuration.AST
open Terrabuild.Configuration.AST.HCL
open Terrabuild.Expressions
open System


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif


# 21 "Gen/HCLParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DOUBLE_QUESTION
  | QUESTION
  | COLON
  | BANG
  | AND
  | OR
  | MINUS
  | PLUS
  | COMMA
  | EQUAL
  | DOUBLE_EQUAL
  | NOT_EQUAL
  | LPAREN
  | RPAREN
  | DOT
  | DOT_QUESTION
  | LSQBRACKET
  | RSQBRACKET
  | LBRACE
  | RBRACE
  | NUMBER of (int)
  | KEY of (string)
  | IDENTIFIER of (string)
  | EXPRESSION_END
  | EXPRESSION_START of (string)
  | STRING_END of (string)
  | STRING_START
  | STRING of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOUBLE_QUESTION
    | TOKEN_QUESTION
    | TOKEN_COLON
    | TOKEN_BANG
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_COMMA
    | TOKEN_EQUAL
    | TOKEN_DOUBLE_EQUAL
    | TOKEN_NOT_EQUAL
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_DOT
    | TOKEN_DOT_QUESTION
    | TOKEN_LSQBRACKET
    | TOKEN_RSQBRACKET
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_NUMBER
    | TOKEN_KEY
    | TOKEN_IDENTIFIER
    | TOKEN_EXPRESSION_END
    | TOKEN_EXPRESSION_START
    | TOKEN_STRING_END
    | TOKEN_STRING_START
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startFile
    | NONTERM_File
    | NONTERM_Blocks
    | NONTERM_Block
    | NONTERM_BlockComponents
    | NONTERM_BlockComponent
    | NONTERM_Expr
    | NONTERM_Function
    | NONTERM_ExprIndex
    | NONTERM_ExprIdentifier
    | NONTERM_String
    | NONTERM_InterpolatedString
    | NONTERM_ExprTuple
    | NONTERM_ExprTupleContent
    | NONTERM_ExprList
    | NONTERM_ExprListContent
    | NONTERM_ExprMap
    | NONTERM_ExprMapContent

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DOUBLE_QUESTION  -> 1 
  | QUESTION  -> 2 
  | COLON  -> 3 
  | BANG  -> 4 
  | AND  -> 5 
  | OR  -> 6 
  | MINUS  -> 7 
  | PLUS  -> 8 
  | COMMA  -> 9 
  | EQUAL  -> 10 
  | DOUBLE_EQUAL  -> 11 
  | NOT_EQUAL  -> 12 
  | LPAREN  -> 13 
  | RPAREN  -> 14 
  | DOT  -> 15 
  | DOT_QUESTION  -> 16 
  | LSQBRACKET  -> 17 
  | RSQBRACKET  -> 18 
  | LBRACE  -> 19 
  | RBRACE  -> 20 
  | NUMBER _ -> 21 
  | KEY _ -> 22 
  | IDENTIFIER _ -> 23 
  | EXPRESSION_END  -> 24 
  | EXPRESSION_START _ -> 25 
  | STRING_END _ -> 26 
  | STRING_START  -> 27 
  | STRING _ -> 28 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DOUBLE_QUESTION 
  | 2 -> TOKEN_QUESTION 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_BANG 
  | 5 -> TOKEN_AND 
  | 6 -> TOKEN_OR 
  | 7 -> TOKEN_MINUS 
  | 8 -> TOKEN_PLUS 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_EQUAL 
  | 11 -> TOKEN_DOUBLE_EQUAL 
  | 12 -> TOKEN_NOT_EQUAL 
  | 13 -> TOKEN_LPAREN 
  | 14 -> TOKEN_RPAREN 
  | 15 -> TOKEN_DOT 
  | 16 -> TOKEN_DOT_QUESTION 
  | 17 -> TOKEN_LSQBRACKET 
  | 18 -> TOKEN_RSQBRACKET 
  | 19 -> TOKEN_LBRACE 
  | 20 -> TOKEN_RBRACE 
  | 21 -> TOKEN_NUMBER 
  | 22 -> TOKEN_KEY 
  | 23 -> TOKEN_IDENTIFIER 
  | 24 -> TOKEN_EXPRESSION_END 
  | 25 -> TOKEN_EXPRESSION_START 
  | 26 -> TOKEN_STRING_END 
  | 27 -> TOKEN_STRING_START 
  | 28 -> TOKEN_STRING 
  | 31 -> TOKEN_end_of_input
  | 29 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startFile 
    | 1 -> NONTERM_File 
    | 2 -> NONTERM_Blocks 
    | 3 -> NONTERM_Blocks 
    | 4 -> NONTERM_Block 
    | 5 -> NONTERM_Block 
    | 6 -> NONTERM_BlockComponents 
    | 7 -> NONTERM_BlockComponents 
    | 8 -> NONTERM_BlockComponent 
    | 9 -> NONTERM_BlockComponent 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Function 
    | 28 -> NONTERM_ExprIndex 
    | 29 -> NONTERM_ExprIndex 
    | 30 -> NONTERM_ExprIdentifier 
    | 31 -> NONTERM_String 
    | 32 -> NONTERM_String 
    | 33 -> NONTERM_InterpolatedString 
    | 34 -> NONTERM_InterpolatedString 
    | 35 -> NONTERM_ExprTuple 
    | 36 -> NONTERM_ExprTupleContent 
    | 37 -> NONTERM_ExprTupleContent 
    | 38 -> NONTERM_ExprTupleContent 
    | 39 -> NONTERM_ExprList 
    | 40 -> NONTERM_ExprListContent 
    | 41 -> NONTERM_ExprListContent 
    | 42 -> NONTERM_ExprMap 
    | 43 -> NONTERM_ExprMapContent 
    | 44 -> NONTERM_ExprMapContent 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 31 
let _fsyacc_tagOfErrorTerminal = 29

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DOUBLE_QUESTION  -> "DOUBLE_QUESTION" 
  | QUESTION  -> "QUESTION" 
  | COLON  -> "COLON" 
  | BANG  -> "BANG" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | COMMA  -> "COMMA" 
  | EQUAL  -> "EQUAL" 
  | DOUBLE_EQUAL  -> "DOUBLE_EQUAL" 
  | NOT_EQUAL  -> "NOT_EQUAL" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | DOT  -> "DOT" 
  | DOT_QUESTION  -> "DOT_QUESTION" 
  | LSQBRACKET  -> "LSQBRACKET" 
  | RSQBRACKET  -> "RSQBRACKET" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | NUMBER _ -> "NUMBER" 
  | KEY _ -> "KEY" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | EXPRESSION_END  -> "EXPRESSION_END" 
  | EXPRESSION_START _ -> "EXPRESSION_START" 
  | STRING_END _ -> "STRING_END" 
  | STRING_START  -> "STRING_START" 
  | STRING _ -> "STRING" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DOUBLE_QUESTION  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | DOUBLE_EQUAL  -> (null : System.Object) 
  | NOT_EQUAL  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | DOT_QUESTION  -> (null : System.Object) 
  | LSQBRACKET  -> (null : System.Object) 
  | RSQBRACKET  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KEY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EXPRESSION_END  -> (null : System.Object) 
  | EXPRESSION_START _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_END _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_START  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;3us;65535us;2us;4us;8us;17us;12us;17us;2us;65535us;7us;8us;11us;12us;2us;65535us;8us;14us;12us;14us;17us;65535us;15us;16us;43us;23us;44us;24us;45us;25us;46us;26us;47us;27us;48us;28us;50us;29us;51us;30us;52us;31us;53us;32us;62us;33us;65us;34us;67us;35us;70us;36us;72us;37us;77us;38us;17us;65535us;15us;49us;43us;49us;44us;49us;45us;49us;46us;49us;47us;49us;48us;49us;50us;49us;51us;49us;52us;49us;53us;49us;62us;49us;65us;49us;67us;49us;70us;49us;72us;49us;77us;49us;2us;65535us;39us;40us;41us;42us;17us;65535us;15us;21us;43us;21us;44us;21us;45us;21us;46us;21us;47us;21us;48us;21us;50us;21us;51us;21us;52us;21us;53us;21us;62us;21us;65us;21us;67us;21us;70us;21us;72us;21us;77us;21us;18us;65535us;15us;22us;43us;22us;44us;22us;45us;22us;46us;22us;47us;22us;48us;22us;50us;22us;51us;22us;52us;22us;53us;22us;58us;64us;62us;22us;65us;22us;67us;22us;70us;22us;72us;22us;77us;22us;1us;65535us;58us;60us;1us;65535us;54us;55us;1us;65535us;67us;68us;17us;65535us;15us;18us;43us;18us;44us;18us;45us;18us;46us;18us;47us;18us;48us;18us;50us;18us;51us;18us;52us;18us;53us;18us;62us;18us;65us;18us;67us;18us;70us;18us;72us;18us;77us;18us;1us;65535us;71us;72us;17us;65535us;15us;19us;43us;19us;44us;19us;45us;19us;46us;19us;47us;19us;48us;19us;50us;19us;51us;19us;52us;19us;53us;19us;62us;19us;65us;19us;67us;19us;70us;19us;72us;19us;77us;19us;1us;65535us;74us;75us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;9us;12us;15us;33us;51us;54us;72us;91us;93us;95us;97us;115us;117us;135us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;3us;1us;1us;1us;3us;2us;4us;5us;3us;4us;5us;8us;1us;4us;2us;4us;7us;1us;4us;1us;5us;1us;5us;2us;5us;7us;1us;5us;1us;7us;1us;8us;11us;8us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;11us;15us;16us;17us;17us;18us;19us;20us;21us;22us;24us;25us;11us;15us;16us;17us;18us;18us;19us;20us;21us;22us;24us;25us;11us;15us;16us;17us;18us;19us;19us;20us;21us;22us;24us;25us;11us;15us;16us;17us;18us;19us;20us;20us;21us;22us;24us;25us;11us;15us;16us;17us;18us;19us;20us;21us;21us;22us;24us;25us;11us;15us;16us;17us;18us;19us;20us;21us;22us;22us;24us;25us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;24us;25us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;25us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;25us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;26us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;33us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;34us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;37us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;38us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;41us;11us;15us;16us;17us;18us;19us;20us;21us;22us;24us;25us;44us;1us;15us;1us;15us;1us;16us;1us;16us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;1us;23us;1us;24us;1us;25us;1us;25us;1us;26us;2us;27us;30us;1us;27us;1us;28us;1us;29us;2us;31us;32us;1us;31us;1us;32us;1us;32us;1us;33us;1us;33us;1us;34us;1us;34us;1us;34us;1us;35us;2us;35us;38us;1us;35us;1us;38us;1us;39us;2us;39us;41us;1us;39us;1us;42us;2us;42us;44us;1us;42us;1us;44us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;14us;18us;20us;23us;25us;27us;29us;32us;34us;36us;38us;50us;52us;54us;56us;58us;60us;62us;74us;86us;98us;110us;122us;134us;146us;158us;170us;182us;194us;206us;218us;230us;242us;254us;256us;258us;260us;262us;264us;266us;268us;270us;272us;274us;276us;278us;280us;282us;284us;287us;289us;291us;293us;296us;298us;300us;302us;304us;306us;308us;310us;312us;314us;317us;319us;321us;323us;326us;328us;330us;333us;335us;|]
let _fsyacc_action_rows = 78
let _fsyacc_actionTableElements = [|0us;16386us;0us;49152us;2us;32768us;0us;3us;23us;5us;0us;16385us;0us;16387us;2us;32768us;19us;7us;23us;10us;3us;32768us;10us;15us;19us;7us;23us;10us;0us;16390us;2us;32768us;20us;9us;23us;6us;0us;16388us;1us;32768us;19us;11us;0us;16390us;2us;32768us;20us;13us;23us;6us;0us;16389us;0us;16391us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;10us;16392us;1us;50us;2us;51us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;0us;16393us;0us;16394us;0us;16395us;0us;16396us;0us;16397us;0us;16398us;6us;16401us;5us;47us;6us;48us;7us;46us;8us;45us;15us;39us;16us;41us;6us;16402us;5us;47us;6us;48us;7us;46us;8us;45us;15us;39us;16us;41us;4us;16403us;5us;47us;6us;48us;15us;39us;16us;41us;4us;16404us;5us;47us;6us;48us;15us;39us;16us;41us;2us;16405us;15us;39us;16us;41us;2us;16406us;15us;39us;16us;41us;8us;16408us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;11us;32768us;1us;50us;2us;51us;3us;52us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;10us;16409us;1us;50us;2us;51us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;0us;16410us;11us;32768us;1us;50us;2us;51us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;24us;63us;11us;32768us;1us;50us;2us;51us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;24us;66us;10us;16421us;1us;50us;2us;51us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;10us;16422us;1us;50us;2us;51us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;10us;16425us;1us;50us;2us;51us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;10us;16428us;1us;50us;2us;51us;5us;47us;6us;48us;7us;46us;8us;45us;11us;43us;12us;44us;15us;39us;16us;41us;2us;32768us;21us;56us;23us;57us;0us;16399us;2us;32768us;21us;56us;23us;57us;0us;16400us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;0us;16407us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;1us;16414us;13us;67us;0us;16411us;0us;16412us;0us;16413us;3us;32768us;25us;62us;26us;59us;27us;58us;0us;16415us;1us;32768us;26us;61us;0us;16416us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;0us;16417us;1us;32768us;25us;65us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;0us;16418us;6us;16420us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;2us;32768us;9us;70us;14us;69us;0us;16419us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;0us;16424us;7us;32768us;4us;53us;17us;71us;18us;73us;19us;74us;21us;20us;23us;54us;27us;58us;0us;16423us;0us;16427us;2us;32768us;20us;76us;22us;77us;0us;16426us;6us;32768us;4us;53us;17us;71us;19us;74us;21us;20us;23us;54us;27us;58us;|]
let _fsyacc_actionTableRowOffsets = [|0us;1us;2us;5us;6us;7us;10us;14us;15us;18us;19us;21us;22us;25us;26us;27us;34us;45us;46us;47us;48us;49us;50us;51us;58us;65us;70us;75us;78us;81us;90us;102us;113us;114us;126us;138us;149us;160us;171us;182us;185us;186us;189us;190us;197us;204us;211us;218us;225us;232us;233us;240us;247us;254us;261us;263us;264us;265us;266us;270us;271us;273us;274us;281us;282us;284us;291us;292us;299us;302us;303us;310us;311us;319us;320us;321us;324us;325us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;0us;2us;4us;5us;0us;2us;3us;1us;1us;1us;1us;1us;1us;3us;3us;3us;3us;3us;3us;3us;3us;1us;3us;5us;2us;2us;1us;1us;1us;2us;3us;3us;4us;3us;0us;1us;3us;3us;0us;2us;3us;0us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;4us;5us;5us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;7us;8us;8us;9us;10us;10us;11us;11us;12us;13us;13us;13us;14us;15us;15us;16us;17us;17us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16387us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;65535us;16389us;16391us;65535us;65535us;16393us;16394us;16395us;16396us;16397us;16398us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16399us;65535us;16400us;65535us;65535us;65535us;65535us;65535us;65535us;16407us;65535us;65535us;65535us;65535us;65535us;16411us;16412us;16413us;65535us;16415us;65535us;16416us;65535us;16417us;65535us;65535us;16418us;65535us;65535us;16419us;65535us;65535us;65535us;16423us;65535us;65535us;16426us;65535us;|]
let _fsyacc_reductions = lazy [|
# 305 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Terrabuild.Configuration.AST.HCL.File in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startFile));
# 314 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "HCLParser/Parser.fsy"
                                        File.Build _1 
                   )
# 54 "HCLParser/Parser.fsy"
                 : Terrabuild.Configuration.AST.HCL.File));
# 325 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 57 "HCLParser/Parser.fsy"
                 : 'gentype_Blocks));
# 335 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Blocks in
            let _2 = parseState.GetInput(2) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "HCLParser/Parser.fsy"
                                          _1 @ [_2] 
                   )
# 58 "HCLParser/Parser.fsy"
                 : 'gentype_Blocks));
# 347 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_BlockComponents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "HCLParser/Parser.fsy"
                                                                      Block.Build _1 None _3 
                   )
# 61 "HCLParser/Parser.fsy"
                 : 'gentype_Block));
# 359 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_BlockComponents in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "HCLParser/Parser.fsy"
                                                                                 Block.Build _1 (Some _2) _4 
                   )
# 62 "HCLParser/Parser.fsy"
                 : 'gentype_Block));
# 372 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 65 "HCLParser/Parser.fsy"
                 : 'gentype_BlockComponents));
# 382 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_BlockComponents in
            let _2 = parseState.GetInput(2) :?> 'gentype_BlockComponent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "HCLParser/Parser.fsy"
                                                            _1 @ [_2] 
                   )
# 66 "HCLParser/Parser.fsy"
                 : 'gentype_BlockComponents));
# 394 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "HCLParser/Parser.fsy"
                                                   Attribute.Build _1 _3 |> BlockComponents.Attribute 
                   )
# 69 "HCLParser/Parser.fsy"
                 : 'gentype_BlockComponent));
# 406 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "HCLParser/Parser.fsy"
                                   _1 |> BlockComponents.Block 
                   )
# 70 "HCLParser/Parser.fsy"
                 : 'gentype_BlockComponent));
# 417 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "HCLParser/Parser.fsy"
                                      Expr.List _1 
                   )
# 74 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 428 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprMap in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "HCLParser/Parser.fsy"
                                     Expr.Map _1 
                   )
# 75 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 439 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "HCLParser/Parser.fsy"
                                    Expr.Number _1 
                   )
# 77 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 450 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprIdentifier in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "HCLParser/Parser.fsy"
                                            _1 
                   )
# 78 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 461 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "HCLParser/Parser.fsy"
                                    _1 
                   )
# 79 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 472 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_ExprIndex in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "HCLParser/Parser.fsy"
                                                Expr.Function (Function.Item, [_1;  _3]) 
                   )
# 81 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 484 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_ExprIndex in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "HCLParser/Parser.fsy"
                                                         Expr.Function (Function.TryItem, [_1; _3]) 
                   )
# 82 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 496 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "HCLParser/Parser.fsy"
                                                    Expr.Function (Function.Equal, [_1; _3]) 
                   )
# 83 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 508 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "HCLParser/Parser.fsy"
                                                 Expr.Function (Function.NotEqual, [_1; _3]) 
                   )
# 84 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 520 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "HCLParser/Parser.fsy"
                                            Expr.Function (Function.Plus, [_1; _3]) 
                   )
# 85 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 532 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "HCLParser/Parser.fsy"
                                             Expr.Function (Function.Minus, [_1; _3]) 
                   )
# 86 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 544 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "HCLParser/Parser.fsy"
                                           Expr.Function (Function.And, [_1; _3]) 
                   )
# 87 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 556 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "HCLParser/Parser.fsy"
                                          Expr.Function (Function.Or, [_1; _3]) 
                   )
# 88 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 568 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Function in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "HCLParser/Parser.fsy"
                                      _1 
                   )
# 89 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 579 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "HCLParser/Parser.fsy"
                                                       Expr.Function (Function.Coalesce, [_1; _3]) 
                   )
# 90 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 591 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "HCLParser/Parser.fsy"
                                                           Expr.Function (Function.Ternary, [_1; _3; _5] ) 
                   )
# 91 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 604 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "HCLParser/Parser.fsy"
                                       Expr.Function (Function.Not, [_2]) 
                   )
# 92 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 615 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "HCLParser/Parser.fsy"
                                                
                             match _1 with
                             | "trim" -> Expr.Function (Function.Trim, _2)
                             | "upper" -> Expr.Function (Function.Upper, _2)
                             | "lower" -> Expr.Function (Function.Lower, _2)
                             | "replace" -> Expr.Function (Function.Replace, _2)
                             | "count" -> Expr.Function (Function.Count, _2)
                             | "version" -> Expr.Function (Function.Version, _2)
                             | "format" -> Expr.Function (Function.Format, _2)
                             | "tostring" -> Expr.Function (Function.ToString, _2)
                             | _ -> Errors.raiseParseError $"Unknown function: {_1}"
                         
                   )
# 95 "HCLParser/Parser.fsy"
                 : 'gentype_Function));
# 638 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "HCLParser/Parser.fsy"
                                    Expr.Number _1 
                   )
# 109 "HCLParser/Parser.fsy"
                 : 'gentype_ExprIndex));
# 649 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "HCLParser/Parser.fsy"
                                        Expr.String _1 
                   )
# 110 "HCLParser/Parser.fsy"
                 : 'gentype_ExprIndex));
# 660 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "HCLParser/Parser.fsy"
                                        
                             match _1 with
                             | "true" -> Expr.Bool true
                             | "false" -> Expr.Bool false
                             | "nothing" -> Expr.Nothing
                             | _ -> Expr.Variable _1
                         
                   )
# 113 "HCLParser/Parser.fsy"
                 : 'gentype_ExprIdentifier));
# 677 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "HCLParser/Parser.fsy"
                                                     Expr.String _2 
                   )
# 122 "HCLParser/Parser.fsy"
                 : 'gentype_String));
# 688 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_InterpolatedString in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "HCLParser/Parser.fsy"
                                                                        
                             if _3 |> String.IsNullOrEmpty then Expr.Function (Function.ToString, [_2])
                             else Expr.Function (Function.Format, [Expr.String "{0}{1}"; _2; Expr.String _3]) 
                         
                   )
# 123 "HCLParser/Parser.fsy"
                 : 'gentype_String));
# 703 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "HCLParser/Parser.fsy"
                                                                  
                             if _1 |> String.IsNullOrEmpty then _2
                             else Expr.Function (Function.Format, [Expr.String "{0}{1}"; Expr.String _1; _2])
                         
                   )
# 129 "HCLParser/Parser.fsy"
                 : 'gentype_InterpolatedString));
# 718 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_String in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "HCLParser/Parser.fsy"
                                                                        
                             if _2 |> String.IsNullOrEmpty then Expr.Function (Function.Format, [Expr.String "{0}{1}"; _1; _3])
                             else Expr.Function (Function.Format, [Expr.String "{0}{1}{2}"; _1; Expr.String _2; _3])
                         
                   )
# 133 "HCLParser/Parser.fsy"
                 : 'gentype_InterpolatedString));
# 734 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTupleContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "HCLParser/Parser.fsy"
                                                            _2 
                   )
# 139 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTuple));
# 745 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 141 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTupleContent));
# 755 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "HCLParser/Parser.fsy"
                                  [_1] 
                   )
# 142 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTupleContent));
# 766 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprTupleContent in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "HCLParser/Parser.fsy"
                                                         _1 @ [_3] 
                   )
# 143 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTupleContent));
# 778 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprListContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "HCLParser/Parser.fsy"
                                                                   _2 
                   )
# 146 "HCLParser/Parser.fsy"
                 : 'gentype_ExprList));
# 789 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 148 "HCLParser/Parser.fsy"
                 : 'gentype_ExprListContent));
# 799 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprListContent in
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "HCLParser/Parser.fsy"
                                                  _1 @ [_2] 
                   )
# 149 "HCLParser/Parser.fsy"
                 : 'gentype_ExprListContent));
# 811 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprMapContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "HCLParser/Parser.fsy"
                                                          _2 
                   )
# 152 "HCLParser/Parser.fsy"
                 : 'gentype_ExprMap));
# 822 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "HCLParser/Parser.fsy"
                                         Map.empty 
                   )
# 154 "HCLParser/Parser.fsy"
                 : 'gentype_ExprMapContent));
# 832 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprMapContent in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "HCLParser/Parser.fsy"
                                                     _1.Add (_2, _3) 
                   )
# 155 "HCLParser/Parser.fsy"
                 : 'gentype_ExprMapContent));
|]
# 846 "Gen/HCLParser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 32;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let File lexer lexbuf : Terrabuild.Configuration.AST.HCL.File =
    engine lexer lexbuf 0 :?> _
