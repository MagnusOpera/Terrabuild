// Implementation file for parser generated by fsyacc
module internal Parser.HCL
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "HCLParser/Parser.fsy"
 
open AST.HCL
open Terrabuild.Expressions
open System


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif


# 20 "Gen/HCLParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DOUBLE_QUESTION
  | QUESTION
  | COLON
  | BANG
  | AND
  | OR
  | MINUS
  | PLUS
  | COMMA
  | EQUAL
  | DOUBLE_EQUAL
  | NOT_EQUAL
  | LPAREN
  | RPAREN
  | DOT
  | DOT_QUESTION
  | LSQBRACKET
  | RSQBRACKET
  | LBRACE
  | RBRACE
  | NUMBER of (int)
  | KEY of (string)
  | IDENTIFIER of (string)
  | EXPRESSION_END
  | EXPRESSION_START of (string)
  | STRING_END of (string)
  | STRING_START
  | STRING of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOUBLE_QUESTION
    | TOKEN_QUESTION
    | TOKEN_COLON
    | TOKEN_BANG
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_COMMA
    | TOKEN_EQUAL
    | TOKEN_DOUBLE_EQUAL
    | TOKEN_NOT_EQUAL
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_DOT
    | TOKEN_DOT_QUESTION
    | TOKEN_LSQBRACKET
    | TOKEN_RSQBRACKET
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_NUMBER
    | TOKEN_KEY
    | TOKEN_IDENTIFIER
    | TOKEN_EXPRESSION_END
    | TOKEN_EXPRESSION_START
    | TOKEN_STRING_END
    | TOKEN_STRING_START
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startFile
    | NONTERM_File
    | NONTERM_Attributes
    | NONTERM_Attribute
    | NONTERM_Blocks
    | NONTERM_Block
    | NONTERM_BlockContent
    | NONTERM_Expr
    | NONTERM_Function
    | NONTERM_ResourceName
    | NONTERM_ResourceIdentifier
    | NONTERM_AttributeName
    | NONTERM_ExprIndex
    | NONTERM_ExprIdentifier
    | NONTERM_String
    | NONTERM_InterpolatedString
    | NONTERM_InterpolatedStringExpression
    | NONTERM_ExprTuple
    | NONTERM_ExprTupleContent
    | NONTERM_ExprList
    | NONTERM_ExprListContent
    | NONTERM_ExprMap
    | NONTERM_ExprMapContent

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DOUBLE_QUESTION  -> 1 
  | QUESTION  -> 2 
  | COLON  -> 3 
  | BANG  -> 4 
  | AND  -> 5 
  | OR  -> 6 
  | MINUS  -> 7 
  | PLUS  -> 8 
  | COMMA  -> 9 
  | EQUAL  -> 10 
  | DOUBLE_EQUAL  -> 11 
  | NOT_EQUAL  -> 12 
  | LPAREN  -> 13 
  | RPAREN  -> 14 
  | DOT  -> 15 
  | DOT_QUESTION  -> 16 
  | LSQBRACKET  -> 17 
  | RSQBRACKET  -> 18 
  | LBRACE  -> 19 
  | RBRACE  -> 20 
  | NUMBER _ -> 21 
  | KEY _ -> 22 
  | IDENTIFIER _ -> 23 
  | EXPRESSION_END  -> 24 
  | EXPRESSION_START _ -> 25 
  | STRING_END _ -> 26 
  | STRING_START  -> 27 
  | STRING _ -> 28 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DOUBLE_QUESTION 
  | 2 -> TOKEN_QUESTION 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_BANG 
  | 5 -> TOKEN_AND 
  | 6 -> TOKEN_OR 
  | 7 -> TOKEN_MINUS 
  | 8 -> TOKEN_PLUS 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_EQUAL 
  | 11 -> TOKEN_DOUBLE_EQUAL 
  | 12 -> TOKEN_NOT_EQUAL 
  | 13 -> TOKEN_LPAREN 
  | 14 -> TOKEN_RPAREN 
  | 15 -> TOKEN_DOT 
  | 16 -> TOKEN_DOT_QUESTION 
  | 17 -> TOKEN_LSQBRACKET 
  | 18 -> TOKEN_RSQBRACKET 
  | 19 -> TOKEN_LBRACE 
  | 20 -> TOKEN_RBRACE 
  | 21 -> TOKEN_NUMBER 
  | 22 -> TOKEN_KEY 
  | 23 -> TOKEN_IDENTIFIER 
  | 24 -> TOKEN_EXPRESSION_END 
  | 25 -> TOKEN_EXPRESSION_START 
  | 26 -> TOKEN_STRING_END 
  | 27 -> TOKEN_STRING_START 
  | 28 -> TOKEN_STRING 
  | 31 -> TOKEN_end_of_input
  | 29 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startFile 
    | 1 -> NONTERM_File 
    | 2 -> NONTERM_File 
    | 3 -> NONTERM_Attributes 
    | 4 -> NONTERM_Attributes 
    | 5 -> NONTERM_Attribute 
    | 6 -> NONTERM_Blocks 
    | 7 -> NONTERM_Blocks 
    | 8 -> NONTERM_Block 
    | 9 -> NONTERM_Block 
    | 10 -> NONTERM_BlockContent 
    | 11 -> NONTERM_BlockContent 
    | 12 -> NONTERM_BlockContent 
    | 13 -> NONTERM_BlockContent 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_Expr 
    | 30 -> NONTERM_Expr 
    | 31 -> NONTERM_Function 
    | 32 -> NONTERM_ResourceName 
    | 33 -> NONTERM_ResourceIdentifier 
    | 34 -> NONTERM_AttributeName 
    | 35 -> NONTERM_ExprIndex 
    | 36 -> NONTERM_ExprIndex 
    | 37 -> NONTERM_ExprIdentifier 
    | 38 -> NONTERM_String 
    | 39 -> NONTERM_InterpolatedString 
    | 40 -> NONTERM_InterpolatedString 
    | 41 -> NONTERM_InterpolatedStringExpression 
    | 42 -> NONTERM_InterpolatedStringExpression 
    | 43 -> NONTERM_ExprTuple 
    | 44 -> NONTERM_ExprTupleContent 
    | 45 -> NONTERM_ExprTupleContent 
    | 46 -> NONTERM_ExprTupleContent 
    | 47 -> NONTERM_ExprList 
    | 48 -> NONTERM_ExprListContent 
    | 49 -> NONTERM_ExprListContent 
    | 50 -> NONTERM_ExprMap 
    | 51 -> NONTERM_ExprMapContent 
    | 52 -> NONTERM_ExprMapContent 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 31 
let _fsyacc_tagOfErrorTerminal = 29

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DOUBLE_QUESTION  -> "DOUBLE_QUESTION" 
  | QUESTION  -> "QUESTION" 
  | COLON  -> "COLON" 
  | BANG  -> "BANG" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | COMMA  -> "COMMA" 
  | EQUAL  -> "EQUAL" 
  | DOUBLE_EQUAL  -> "DOUBLE_EQUAL" 
  | NOT_EQUAL  -> "NOT_EQUAL" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | DOT  -> "DOT" 
  | DOT_QUESTION  -> "DOT_QUESTION" 
  | LSQBRACKET  -> "LSQBRACKET" 
  | RSQBRACKET  -> "RSQBRACKET" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | NUMBER _ -> "NUMBER" 
  | KEY _ -> "KEY" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | EXPRESSION_END  -> "EXPRESSION_END" 
  | EXPRESSION_START _ -> "EXPRESSION_START" 
  | STRING_END _ -> "STRING_END" 
  | STRING_START  -> "STRING_START" 
  | STRING _ -> "STRING" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DOUBLE_QUESTION  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | DOUBLE_EQUAL  -> (null : System.Object) 
  | NOT_EQUAL  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | DOT_QUESTION  -> (null : System.Object) 
  | LSQBRACKET  -> (null : System.Object) 
  | RSQBRACKET  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KEY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EXPRESSION_END  -> (null : System.Object) 
  | EXPRESSION_START _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_END _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_START  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;16us;6us;20us;6us;3us;65535us;6us;7us;16us;5us;20us;5us;4us;65535us;0us;3us;6us;13us;16us;12us;20us;12us;7us;65535us;0us;11us;3us;14us;6us;11us;12us;14us;13us;14us;16us;11us;20us;11us;2us;65535us;16us;17us;20us;21us;17us;65535us;9us;10us;48us;28us;49us;29us;50us;30us;51us;31us;52us;32us;53us;33us;55us;34us;56us;35us;57us;36us;58us;37us;71us;38us;73us;39us;75us;40us;78us;41us;80us;42us;85us;43us;17us;65535us;9us;54us;48us;54us;49us;54us;50us;54us;51us;54us;52us;54us;53us;54us;55us;54us;56us;54us;57us;54us;58us;54us;71us;54us;73us;54us;75us;54us;78us;54us;80us;54us;85us;54us;7us;65535us;0us;15us;3us;15us;6us;15us;12us;15us;13us;15us;16us;15us;20us;15us;1us;65535us;15us;19us;3us;65535us;6us;8us;16us;8us;20us;8us;2us;65535us;44us;45us;46us;47us;17us;65535us;9us;26us;48us;26us;49us;26us;50us;26us;51us;26us;52us;26us;53us;26us;55us;26us;56us;26us;57us;26us;58us;26us;71us;26us;73us;26us;75us;26us;78us;26us;80us;26us;85us;26us;17us;65535us;9us;68us;48us;68us;49us;68us;50us;68us;51us;68us;52us;68us;53us;68us;55us;68us;56us;68us;57us;68us;58us;68us;71us;68us;73us;68us;75us;68us;78us;68us;80us;68us;85us;68us;17us;65535us;9us;27us;48us;27us;49us;27us;50us;27us;51us;27us;52us;27us;53us;27us;55us;27us;56us;27us;57us;27us;58us;27us;71us;27us;73us;27us;75us;27us;78us;27us;80us;27us;85us;27us;1us;65535us;66us;69us;1us;65535us;59us;60us;1us;65535us;75us;76us;17us;65535us;9us;23us;48us;23us;49us;23us;50us;23us;51us;23us;52us;23us;53us;23us;55us;23us;56us;23us;57us;23us;58us;23us;71us;23us;73us;23us;75us;23us;78us;23us;80us;23us;85us;23us;1us;65535us;79us;80us;17us;65535us;9us;24us;48us;24us;49us;24us;50us;24us;51us;24us;52us;24us;53us;24us;55us;24us;56us;24us;57us;24us;58us;24us;71us;24us;73us;24us;75us;24us;78us;24us;80us;24us;85us;24us;1us;65535us;82us;83us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;10us;15us;23us;26us;44us;62us;70us;72us;76us;79us;97us;115us;133us;135us;137us;139us;157us;159us;177us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;2us;2us;7us;1us;2us;1us;3us;3us;4us;11us;13us;1us;4us;1us;5us;1us;5us;11us;5us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;1us;6us;2us;7us;12us;2us;7us;13us;1us;7us;2us;8us;9us;1us;8us;1us;8us;1us;8us;1us;9us;1us;9us;1us;9us;1us;9us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;11us;19us;20us;21us;21us;22us;23us;24us;25us;26us;28us;29us;11us;19us;20us;21us;22us;22us;23us;24us;25us;26us;28us;29us;11us;19us;20us;21us;22us;23us;23us;24us;25us;26us;28us;29us;11us;19us;20us;21us;22us;23us;24us;24us;25us;26us;28us;29us;11us;19us;20us;21us;22us;23us;24us;25us;25us;26us;28us;29us;11us;19us;20us;21us;22us;23us;24us;25us;26us;26us;28us;29us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;28us;29us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;29us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;29us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;30us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;41us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;42us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;45us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;46us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;49us;11us;19us;20us;21us;22us;23us;24us;25us;26us;28us;29us;52us;1us;19us;1us;19us;1us;20us;1us;20us;1us;21us;1us;22us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;29us;1us;30us;2us;31us;37us;1us;31us;1us;32us;2us;32us;34us;1us;33us;1us;35us;1us;36us;2us;38us;40us;1us;38us;1us;39us;2us;40us;42us;1us;40us;1us;41us;1us;41us;1us;42us;1us;42us;1us;43us;2us;43us;46us;1us;43us;1us;46us;1us;47us;2us;47us;49us;1us;47us;1us;50us;2us;50us;52us;1us;50us;1us;52us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;9us;11us;13us;17us;19us;21us;23us;35us;37us;40us;43us;45us;48us;50us;52us;54us;56us;58us;60us;62us;64us;66us;68us;70us;72us;84us;96us;108us;120us;132us;144us;156us;168us;180us;192us;204us;216us;228us;240us;252us;264us;266us;268us;270us;272us;274us;276us;278us;280us;282us;284us;286us;288us;290us;292us;294us;297us;299us;301us;304us;306us;308us;310us;313us;315us;317us;320us;322us;324us;326us;328us;330us;332us;335us;337us;339us;341us;344us;346us;348us;351us;353us;|]
let _fsyacc_action_rows = 86
let _fsyacc_actionTableElements = [|2us;32768us;0us;2us;23us;61us;0us;49152us;0us;16385us;2us;32768us;0us;4us;23us;61us;0us;16386us;0us;16387us;1us;16395us;23us;62us;0us;16388us;1us;32768us;10us;9us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;10us;16389us;1us;55us;2us;56us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;0us;16390us;1us;16396us;23us;61us;1us;16397us;23us;61us;0us;16391us;2us;32768us;19us;16us;23us;63us;1us;16394us;23us;62us;1us;32768us;20us;18us;0us;16392us;1us;32768us;19us;20us;1us;16394us;23us;62us;1us;32768us;20us;22us;0us;16393us;0us;16398us;0us;16399us;0us;16400us;0us;16401us;0us;16402us;6us;16405us;5us;52us;6us;53us;7us;51us;8us;50us;15us;44us;16us;46us;6us;16406us;5us;52us;6us;53us;7us;51us;8us;50us;15us;44us;16us;46us;4us;16407us;5us;52us;6us;53us;15us;44us;16us;46us;4us;16408us;5us;52us;6us;53us;15us;44us;16us;46us;2us;16409us;15us;44us;16us;46us;2us;16410us;15us;44us;16us;46us;8us;16412us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;11us;32768us;1us;55us;2us;56us;3us;57us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;10us;16413us;1us;55us;2us;56us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;0us;16414us;11us;32768us;1us;55us;2us;56us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;24us;72us;11us;32768us;1us;55us;2us;56us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;24us;74us;10us;16429us;1us;55us;2us;56us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;10us;16430us;1us;55us;2us;56us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;10us;16433us;1us;55us;2us;56us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;10us;16436us;1us;55us;2us;56us;5us;52us;6us;53us;7us;51us;8us;50us;11us;48us;12us;49us;15us;44us;16us;46us;2us;32768us;21us;64us;23us;65us;0us;16403us;2us;32768us;21us;64us;23us;65us;0us;16404us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;0us;16411us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;1us;16421us;13us;75us;0us;16415us;0us;16416us;1us;16416us;10us;16418us;0us;16417us;0us;16419us;0us;16420us;2us;32768us;25us;71us;26us;67us;0us;16422us;0us;16423us;2us;32768us;25us;73us;26us;70us;0us;16424us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;0us;16425us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;0us;16426us;6us;16428us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;2us;32768us;9us;78us;14us;77us;0us;16427us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;0us;16432us;7us;32768us;4us;58us;17us;79us;18us;81us;19us;82us;21us;25us;23us;59us;27us;66us;0us;16431us;0us;16435us;2us;32768us;20us;84us;22us;85us;0us;16434us;6us;32768us;4us;58us;17us;79us;19us;82us;21us;25us;23us;59us;27us;66us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;5us;8us;9us;10us;12us;13us;15us;22us;33us;34us;36us;38us;39us;42us;44us;46us;47us;49us;51us;53us;54us;55us;56us;57us;58us;59us;66us;73us;78us;83us;86us;89us;98us;110us;121us;122us;134us;146us;157us;168us;179us;190us;193us;194us;197us;198us;205us;212us;219us;226us;233us;240us;241us;248us;255us;262us;269us;271us;272us;273us;275us;276us;277us;278us;281us;282us;283us;286us;287us;294us;295us;302us;303us;310us;313us;314us;321us;322us;330us;331us;332us;335us;336us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;2us;1us;2us;3us;1us;2us;4us;5us;0us;1us;1us;2us;1us;1us;1us;1us;1us;3us;3us;3us;3us;3us;3us;3us;3us;1us;3us;5us;2us;2us;1us;1us;1us;1us;1us;1us;2us;1us;3us;3us;4us;3us;0us;1us;3us;3us;0us;2us;3us;0us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;2us;3us;4us;4us;5us;5us;6us;6us;6us;6us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;8us;9us;10us;11us;12us;12us;13us;14us;15us;15us;16us;16us;17us;18us;18us;18us;19us;20us;20us;21us;22us;22us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;16386us;16387us;65535us;16388us;65535us;65535us;65535us;16390us;65535us;65535us;16391us;65535us;65535us;65535us;16392us;65535us;65535us;65535us;16393us;16398us;16399us;16400us;16401us;16402us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16403us;65535us;16404us;65535us;65535us;65535us;65535us;65535us;65535us;16411us;65535us;65535us;65535us;65535us;65535us;16415us;16416us;65535us;16417us;16419us;16420us;65535us;16422us;16423us;65535us;16424us;65535us;16425us;65535us;16426us;65535us;65535us;16427us;65535us;65535us;65535us;16431us;65535us;65535us;16434us;65535us;|]
let _fsyacc_reductions = lazy [|
# 317 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.HCL.File in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startFile));
# 326 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "HCLParser/Parser.fsy"
                                 File.Build [] 
                   )
# 53 "HCLParser/Parser.fsy"
                 : AST.HCL.File));
# 336 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "HCLParser/Parser.fsy"
                                        File.Build _1 
                   )
# 54 "HCLParser/Parser.fsy"
                 : AST.HCL.File));
# 347 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Attribute in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "HCLParser/Parser.fsy"
                                       [_1] 
                   )
# 57 "HCLParser/Parser.fsy"
                 : 'gentype_Attributes));
# 358 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Attributes in
            let _2 = parseState.GetInput(2) :?> 'gentype_Attribute in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "HCLParser/Parser.fsy"
                                                  Attribute.Append _1 _2 
                   )
# 58 "HCLParser/Parser.fsy"
                 : 'gentype_Attributes));
# 370 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_AttributeName in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "HCLParser/Parser.fsy"
                                                      Attribute.Build _1 _3 
                   )
# 61 "HCLParser/Parser.fsy"
                 : 'gentype_Attribute));
# 382 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "HCLParser/Parser.fsy"
                                   [_1] 
                   )
# 64 "HCLParser/Parser.fsy"
                 : 'gentype_Blocks));
# 393 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Blocks in
            let _2 = parseState.GetInput(2) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "HCLParser/Parser.fsy"
                                          _1 @ [_2] 
                   )
# 65 "HCLParser/Parser.fsy"
                 : 'gentype_Blocks));
# 405 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ResourceName in
            let _3 = parseState.GetInput(3) :?> 'gentype_BlockContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "HCLParser/Parser.fsy"
                                                                     Block.Build _1 None _3 
                   )
# 68 "HCLParser/Parser.fsy"
                 : 'gentype_Block));
# 417 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ResourceName in
            let _2 = parseState.GetInput(2) :?> 'gentype_ResourceIdentifier in
            let _4 = parseState.GetInput(4) :?> 'gentype_BlockContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "HCLParser/Parser.fsy"
                                                                                        Block.Build _1 (Some _2) _4 
                   )
# 69 "HCLParser/Parser.fsy"
                 : 'gentype_Block));
# 430 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "HCLParser/Parser.fsy"
                                         ([], []) 
                   )
# 72 "HCLParser/Parser.fsy"
                 : 'gentype_BlockContent));
# 440 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Attributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "HCLParser/Parser.fsy"
                                        (_1, []) 
                   )
# 73 "HCLParser/Parser.fsy"
                 : 'gentype_BlockContent));
# 451 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "HCLParser/Parser.fsy"
                                    ([], _1) 
                   )
# 74 "HCLParser/Parser.fsy"
                 : 'gentype_BlockContent));
# 462 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Attributes in
            let _2 = parseState.GetInput(2) :?> 'gentype_Blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "HCLParser/Parser.fsy"
                                               (_1, _2) 
                   )
# 75 "HCLParser/Parser.fsy"
                 : 'gentype_BlockContent));
# 474 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "HCLParser/Parser.fsy"
                                      Expr.List _1 
                   )
# 79 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 485 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprMap in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "HCLParser/Parser.fsy"
                                     Expr.Map _1 
                   )
# 80 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 496 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "HCLParser/Parser.fsy"
                                    Expr.Number _1 
                   )
# 82 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 507 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprIdentifier in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "HCLParser/Parser.fsy"
                                            _1 
                   )
# 83 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 518 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_InterpolatedString in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "HCLParser/Parser.fsy"
                                                _1 
                   )
# 84 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 529 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_ExprIndex in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "HCLParser/Parser.fsy"
                                                Expr.Function (Function.Item, [_1;  _3]) 
                   )
# 86 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 541 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_ExprIndex in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "HCLParser/Parser.fsy"
                                                         Expr.Function (Function.TryItem, [_1; _3]) 
                   )
# 87 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 553 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "HCLParser/Parser.fsy"
                                                    Expr.Function (Function.Equal, [_1; _3]) 
                   )
# 88 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 565 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "HCLParser/Parser.fsy"
                                                 Expr.Function (Function.NotEqual, [_1; _3]) 
                   )
# 89 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 577 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "HCLParser/Parser.fsy"
                                            Expr.Function (Function.Plus, [_1; _3]) 
                   )
# 90 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 589 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "HCLParser/Parser.fsy"
                                             Expr.Function (Function.Minus, [_1; _3]) 
                   )
# 91 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 601 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "HCLParser/Parser.fsy"
                                           Expr.Function (Function.And, [_1; _3]) 
                   )
# 92 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 613 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "HCLParser/Parser.fsy"
                                          Expr.Function (Function.Or, [_1; _3]) 
                   )
# 93 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 625 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Function in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "HCLParser/Parser.fsy"
                                      _1 
                   )
# 94 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 636 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "HCLParser/Parser.fsy"
                                                       Expr.Function (Function.Coalesce, [_1; _3]) 
                   )
# 95 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 648 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "HCLParser/Parser.fsy"
                                                           Expr.Function (Function.Ternary, [_1; _3; _5] ) 
                   )
# 96 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 661 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "HCLParser/Parser.fsy"
                                       Expr.Function (Function.Not, [_2]) 
                   )
# 97 "HCLParser/Parser.fsy"
                 : 'gentype_Expr));
# 672 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "HCLParser/Parser.fsy"
                                                
                             match _1 with
                             | "trim" -> Expr.Function (Function.Trim, _2)
                             | "upper" -> Expr.Function (Function.Upper, _2)
                             | "lower" -> Expr.Function (Function.Lower, _2)
                             | "replace" -> Expr.Function (Function.Replace, _2)
                             | "count" -> Expr.Function (Function.Count, _2)
                             | "version" -> Expr.Function (Function.Version, _2)
                             | "format" -> Expr.Function (Function.Format, _2)
                             | "tostring" -> Expr.Function (Function.ToString, _2)
                             | _ -> Errors.raiseParseError $"Unknown function: {_1}"
                         
                   )
# 100 "HCLParser/Parser.fsy"
                 : 'gentype_Function));
# 695 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "HCLParser/Parser.fsy"
                                       
                             match _1 with
                             | String.Regex "(@?[a-z](?:[_-]?[a-z0-9]+)*)" [identifier] -> identifier
                             | _ -> Errors.raiseParseError $"Invalid resource name: {_1}"
                         
                   )
# 114 "HCLParser/Parser.fsy"
                 : 'gentype_ResourceName));
# 710 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "HCLParser/Parser.fsy"
                                       
                             match _1 with
                             | String.Regex "([a-z](?:[_-]?[a-z0-9]+)*)" [identifier] -> identifier
                             | _ -> Errors.raiseParseError $"Invalid resource identifier: {_1}"
                         
                   )
# 121 "HCLParser/Parser.fsy"
                 : 'gentype_ResourceIdentifier));
# 725 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "HCLParser/Parser.fsy"
                                       
                             match _1 with
                             | String.Regex "([a-z](?:[_-]?[a-z0-9]+)*)" [identifier] -> identifier
                             | _ -> Errors.raiseParseError "Invalid attribute name: {_1}"
                         
                   )
# 128 "HCLParser/Parser.fsy"
                 : 'gentype_AttributeName));
# 740 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "HCLParser/Parser.fsy"
                                    Expr.Number _1 
                   )
# 135 "HCLParser/Parser.fsy"
                 : 'gentype_ExprIndex));
# 751 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "HCLParser/Parser.fsy"
                                        Expr.String _1 
                   )
# 136 "HCLParser/Parser.fsy"
                 : 'gentype_ExprIndex));
# 762 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "HCLParser/Parser.fsy"
                                        
                             match _1 with
                             | "true" -> Expr.Bool true
                             | "false" -> Expr.Bool false
                             | "nothing" -> Expr.Nothing
                             | _ -> Expr.Variable _1
                         
                   )
# 139 "HCLParser/Parser.fsy"
                 : 'gentype_ExprIdentifier));
# 779 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "HCLParser/Parser.fsy"
                                                     _2 
                   )
# 148 "HCLParser/Parser.fsy"
                 : 'gentype_String));
# 790 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "HCLParser/Parser.fsy"
                                    Expr.String _1 
                   )
# 151 "HCLParser/Parser.fsy"
                 : 'gentype_InterpolatedString));
# 801 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_InterpolatedStringExpression in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "HCLParser/Parser.fsy"
                                                                                  
                             if _3 |> String.IsNullOrEmpty then Expr.Function (Function.ToString, [_2])
                             else Expr.Function (Function.Format, [Expr.String "{0}{1}"; _2; Expr.String _3]) 
                         
                   )
# 152 "HCLParser/Parser.fsy"
                 : 'gentype_InterpolatedString));
# 816 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "HCLParser/Parser.fsy"
                                                                  
                             if _1 |> String.IsNullOrEmpty then _2
                             else Expr.Function (Function.Format, [Expr.String "{0}{1}"; Expr.String _1; _2])
                         
                   )
# 158 "HCLParser/Parser.fsy"
                 : 'gentype_InterpolatedStringExpression));
# 831 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_InterpolatedStringExpression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "HCLParser/Parser.fsy"
                                                                                              
                             if _2 |> String.IsNullOrEmpty then Expr.Function (Function.Format, [Expr.String "{0}{1}"; _1; _3])
                             else Expr.Function (Function.Format, [Expr.String "{0}{1}{2}"; _1; Expr.String _2; _3])
                         
                   )
# 162 "HCLParser/Parser.fsy"
                 : 'gentype_InterpolatedStringExpression));
# 847 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprTupleContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "HCLParser/Parser.fsy"
                                                            _2 
                   )
# 168 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTuple));
# 858 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 170 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTupleContent));
# 868 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "HCLParser/Parser.fsy"
                                  [_1] 
                   )
# 171 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTupleContent));
# 879 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprTupleContent in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "HCLParser/Parser.fsy"
                                                         _1 @ [_3] 
                   )
# 172 "HCLParser/Parser.fsy"
                 : 'gentype_ExprTupleContent));
# 891 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprListContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "HCLParser/Parser.fsy"
                                                                   _2 
                   )
# 175 "HCLParser/Parser.fsy"
                 : 'gentype_ExprList));
# 902 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "HCLParser/Parser.fsy"
                                         [] 
                   )
# 177 "HCLParser/Parser.fsy"
                 : 'gentype_ExprListContent));
# 912 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprListContent in
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "HCLParser/Parser.fsy"
                                                  _1 @ [_2] 
                   )
# 178 "HCLParser/Parser.fsy"
                 : 'gentype_ExprListContent));
# 924 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprMapContent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "HCLParser/Parser.fsy"
                                                          _2 
                   )
# 181 "HCLParser/Parser.fsy"
                 : 'gentype_ExprMap));
# 935 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "HCLParser/Parser.fsy"
                                         Map.empty 
                   )
# 183 "HCLParser/Parser.fsy"
                 : 'gentype_ExprMapContent));
# 945 "Gen/HCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprMapContent in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "HCLParser/Parser.fsy"
                                                     _1.Add (_2, _3) 
                   )
# 184 "HCLParser/Parser.fsy"
                 : 'gentype_ExprMapContent));
|]
# 959 "Gen/HCLParser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 32;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let File lexer lexbuf : AST.HCL.File =
    engine lexer lexbuf 0 :?> _
