%{ 
open Terrabuild.Parser.AST
open Terrabuild.Parser.Workspace.AST
open Terrabuild.Expressions


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start Workspace
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token <string> IDENTIFIER
%token <string> VARIABLE
%token <string> KEY
%token LBRACE RBRACE
%token LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL
%token COMMA
%token PLUS
%token TRIM UPPER LOWER
%token EOF
%token CONFIGURATION TARGET ENVIRONMENT EXTENSION
%token STORAGE SOURCECONTROL DEPENDS_ON VARIABLES CONTAINER INIT SCRIPT DEFAULTS

// associativity and precedences
%left PLUS

%type <Terrabuild.Parser.Workspace.AST.Workspace> Workspace
%% 

Workspace:
    | WorkspaceComponents EOF { $1 }

WorkspaceComponents:
    | /* empty */ { Workspace.Empty }
    | WorkspaceComponents Configuration { $1.Patch $2 }
    | WorkspaceComponents Target { $1.Patch $2 }
    | WorkspaceComponents Environment { $1.Patch $2 }
    | WorkspaceComponents Extension { $1.Patch $2 }

Configuration:
    | CONFIGURATION LBRACE ConfigurationComponents RBRACE { WorkspaceComponents.Configuration $3 }
ConfigurationComponents:
    | /* empty */ { Configuration.Empty }
    | ConfigurationComponents ConfigurationStorage { $1.Patch $2 }
    | ConfigurationComponents ConfigurationSourceControl { $1.Patch $2 }
ConfigurationStorage:
    | STORAGE String { ConfigurationComponents.Storage $2 }
ConfigurationSourceControl:
    | SOURCECONTROL String { ConfigurationComponents.SourceControl $2 }

Target:
    | TARGET IDENTIFIER LBRACE TargetComponents RBRACE { WorkspaceComponents.Target ($2, $4) }
TargetComponents:
    | /* empty */ { Target.Empty }
    | TargetComponents TargetDependsOn { $1.Patch $2 }
TargetDependsOn:
    | DEPENDS_ON ListOfString { TargetComponents.DependsOn $2 }

Environment:
    | ENVIRONMENT IDENTIFIER LBRACE EnvironmentComponents RBRACE { WorkspaceComponents.Environment ($2, $4) }
EnvironmentComponents:
    | /* empty */ { Environment.Empty }
    | EnvironmentComponents EnvironmentVariables { $1.Patch $2 }
EnvironmentVariables:
    | VARIABLES LBRACE StringVariables RBRACE { EnvironmentComponents.Variables $3 }

Extension:
    | EXTENSION IDENTIFIER LBRACE ExtensionComponents RBRACE { WorkspaceComponents.Extension ($2, $4) }
ExtensionComponents:
    | /* empty */ { Extension.Empty }
    | ExtensionComponents Container { $1.Patch $2 }
    | ExtensionComponents Script { $1.Patch $2 }
    | ExtensionComponents Defaults { $1.Patch $2 }
Container:
    | CONTAINER String { ExtensionComponents.Container $2 }
Script:
    | SCRIPT String { ExtensionComponents.Script $2 }
Defaults:
    | DEFAULTS LBRACE Variables RBRACE { ExtensionComponents.Defaults $3 }

String:
    | STRING { $1 }
ListOfString:
    | LSQBRACKET Strings RSQBRACKET { $2 }
Strings:
    | /* empty */ { [] }
    | Strings String { $1 @ [$2] }

ListOfTargets:
    | LSQBRACKET Targets RSQBRACKET { $2 }
Targets:
    | /* empty */ { [] }
    | Targets IDENTIFIER { $1 @ [$2] }

StringVariables:
    | /* empty */ { Map.empty }
    | StringVariables StringVariable { $1.Add $2 }
StringVariable:
    | KEY String { ($1, $2) }

Variables:
    | /* empty */ { Map.empty }
    | Variables Variable { $1.Add $2 }
Variable:
    | KEY Expr { ($1, $2) }

Expr:
    | NOTHING { Expr.Nothing }
    | TRUE { Expr.Boolean true }
    | FALSE { Expr.Boolean false }
    | STRING { Expr.String $1 }
    | VARIABLE { Expr.Variable $1 }
    | LBRACE Variables RBRACE { Expr.Map $2 }
    | Expr PLUS Expr { Expr.Function (Function.Plus, [$1; $3]) }
    | TRIM LPAREN Expr RPAREN { Expr.Function (Function.Trim, [$3]) }
    | UPPER LPAREN Expr RPAREN { Expr.Function (Function.Upper, [$3]) }
    | LOWER LPAREN Expr RPAREN { Expr.Function (Function.Lower, [$3]) }
