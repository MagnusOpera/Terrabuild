%{ 
open AST


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start Configuration
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token <string> IDENTIFIER
%token <string> VARIABLE
%token LBRACE RBRACE
%token LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL
%token COMMA
%token PLUS
%token TRIM UPPER LOWER
%token EOF

// associativity and precedences
%left PLUS

%type <AST.Attributes> Configuration
%type <AST.Attributes> Attributes
%type <AST.Attribute> Attribute
%type <AST.Attribute> AttributeValue
%type <AST.Attribute> AttributeArray
%type <AST.Attribute> AttributeBlock
%type <AST.Attributes> BlockBody
%type <AST.Expr> Expr
%% 

Configuration: Attributes EOF { $1 }

Attributes: /* empty */ { [] }
          | Attributes Attribute { $1 @ [$2] }

Attribute: AttributeValue { $1 }
         | AttributeArray { $1 }
         | AttributeBlock { $1 }

AttributeValue: IDENTIFIER EQUAL Expr { Value ($1, $3) }

AttributeArray: IDENTIFIER EQUAL LSQBRACKET ArrayValues RSQBRACKET { Array ($1, $4) }
ArrayValues: /* empty */ { [] }
           | ArrayValues Expr { $1 @ [$2] }

AttributeBlock: IDENTIFIER BlockBody { Block ($1, $2) }
              | IDENTIFIER IDENTIFIER BlockBody { BlockWithType ($1, $2, $3) }
              | IDENTIFIER IDENTIFIER STRING BlockBody { BlockWithTypeAndAlias ($1, $2, $3, $4) }

BlockBody: LBRACE Attributes RBRACE { $2 }

Expr: NOTHING { Nothing }
    | TRUE { Boolean true }
    | FALSE { Boolean false }
    | STRING { String $1 }
    | VARIABLE { Variable $1 }
    | Expr PLUS Expr { InfixFunction ($1, Plus, $3) }
    | TRIM LPAREN Expr RPAREN { Function (Trim, $3) }
    | UPPER LPAREN Expr RPAREN { Function (Upper, $3) }
    | LOWER LPAREN Expr RPAREN { Function (Lower, $3) }
