%{ 
open Terrabuild.Parser.AST
open Terrabuild.Parser.Build.AST


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start Build
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token <string> IDENTIFIER
%token <string> VARIABLE
%token LBRACE RBRACE
%token LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL
%token COMMA
%token PLUS
%token TRIM UPPER LOWER
%token EOF
%token EXTENSION PROJECT TARGET 
%token DEPENDENCIES OUTPUTS IGNORES LABELS PARSER CONTAINER PARAMETERS SCRIPT DEPENDS_ON

// associativity and precedences
%left PLUS

%type <Terrabuild.Parser.Build.AST.Build> Build
%% 

Build:
    | BuildComponents EOF { $1 }

BuildComponents:
    | /* empty */ { Build.Empty }
    | BuildComponents Extension { $1.Patch $2 }
    | BuildComponents Project { $1.Patch $2 }
    | BuildComponents Target { $1.Patch $2 }


Extension:
    | EXTENSION IDENTIFIER LBRACE ExtensionComponents RBRACE { BuildComponents.Extension ($2, $4) }
ExtensionComponents:
    | /* empty */ { Extension.Empty }
    | ExtensionComponents Container { $1.Patch $2 }
    | ExtensionComponents Script { $1.Patch $2 }
    | ExtensionComponents Parameters { $1.Patch $2 }
Container:
    | CONTAINER EQUAL String { ExtensionComponents.Container $3 }
Script:
    | SCRIPT EQUAL String { ExtensionComponents.Script $3 }
Parameters:
    | PARAMETERS LBRACE Variables RBRACE { ExtensionComponents.Parameters $3 }


Project:
    | PROJECT LBRACE ProjectComponents RBRACE { BuildComponents.Project $3 }
ProjectComponents:
    | /* empty */ { Project.Empty }
    | ProjectComponents ProjectDependencies { $1.Patch $2 }
    | ProjectComponents ProjectOutputs { $1.Patch $2 }
    | ProjectComponents ProjectIgnores { $1.Patch $2 }
    | ProjectComponents ProjectLabels { $1.Patch $2 }
    | ProjectComponents ProjectParser { $1.Patch $2 }
ProjectDependencies:
    | DEPENDENCIES EQUAL ListOfString { ProjectComponents.Dependencies $3 }
ProjectOutputs:
    | OUTPUTS EQUAL ListOfString { ProjectComponents.Outputs $3 }
ProjectIgnores:
    | IGNORES EQUAL ListOfString { ProjectComponents.Ignores $3 }
ProjectLabels:
    | LABELS EQUAL ListOfString { ProjectComponents.Labels $3 }
ProjectParser:
    | PARSER EQUAL String { ProjectComponents.Parser $3 }


Target:
    | TARGET IDENTIFIER LBRACE TargetComponents RBRACE { BuildComponents.Target ($2, $4) }
TargetComponents:
    | /* empty */ { Target.Empty }
    | TargetComponents DependsOn { $1.Patch $2 }
    | TargetComponents Step { $1.Patch $2 }
DependsOn:
    | DEPENDS_ON EQUAL ListOfString { TargetComponents.DependsOn $3 }
Step:
    | IDENTIFIER IDENTIFIER LBRACE Variables RBRACE { TargetComponents.Step { Extension = $1; Command = $2; Parameters = $4 } }

String:
    | STRING { $1 }
ListOfString:
    | LSQBRACKET Strings RSQBRACKET { $2 }
Strings:
    | /* empty */ { [] }
    | Strings String { $1 @ [$2] }

Variables:
    | /* empty */ { Map.empty }
    | Variables Variable { $1.Add $2 }
Variable:
    | IDENTIFIER EQUAL Expr { ($1, $3) }

Expr:
    | NOTHING { Nothing }
    | TRUE { Boolean true }
    | FALSE { Boolean false }
    | STRING { String $1 }
    | VARIABLE { Variable $1 }
    | Expr PLUS Expr { InfixFunction ($1, Plus, $3) }
    | TRIM LPAREN Expr RPAREN { Function (Trim, $3) }
    | UPPER LPAREN Expr RPAREN { Function (Upper, $3) }
    | LOWER LPAREN Expr RPAREN { Function (Lower, $3) }
