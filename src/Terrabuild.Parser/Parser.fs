// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"
 
open AST


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif


# 18 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | TRIM
  | UPPER
  | LOWER
  | PLUS
  | COMMA
  | EQUAL
  | LPAREN
  | RPAREN
  | LSQBRACKET
  | RSQBRACKET
  | LBRACE
  | RBRACE
  | VARIABLE of (string)
  | IDENTIFIER of (string)
  | STRING of (string)
  | NOTHING
  | TRUE
  | FALSE
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_TRIM
    | TOKEN_UPPER
    | TOKEN_LOWER
    | TOKEN_PLUS
    | TOKEN_COMMA
    | TOKEN_EQUAL
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LSQBRACKET
    | TOKEN_RSQBRACKET
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_VARIABLE
    | TOKEN_IDENTIFIER
    | TOKEN_STRING
    | TOKEN_NOTHING
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startConfiguration
    | NONTERM_Configuration
    | NONTERM_Attributes
    | NONTERM_Attribute
    | NONTERM_AttributeScalar
    | NONTERM_AttributeArray
    | NONTERM_ArrayValues
    | NONTERM_AttributeBlock
    | NONTERM_BlockValues
    | NONTERM_Expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | TRIM  -> 1 
  | UPPER  -> 2 
  | LOWER  -> 3 
  | PLUS  -> 4 
  | COMMA  -> 5 
  | EQUAL  -> 6 
  | LPAREN  -> 7 
  | RPAREN  -> 8 
  | LSQBRACKET  -> 9 
  | RSQBRACKET  -> 10 
  | LBRACE  -> 11 
  | RBRACE  -> 12 
  | VARIABLE _ -> 13 
  | IDENTIFIER _ -> 14 
  | STRING _ -> 15 
  | NOTHING  -> 16 
  | TRUE  -> 17 
  | FALSE  -> 18 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_TRIM 
  | 2 -> TOKEN_UPPER 
  | 3 -> TOKEN_LOWER 
  | 4 -> TOKEN_PLUS 
  | 5 -> TOKEN_COMMA 
  | 6 -> TOKEN_EQUAL 
  | 7 -> TOKEN_LPAREN 
  | 8 -> TOKEN_RPAREN 
  | 9 -> TOKEN_LSQBRACKET 
  | 10 -> TOKEN_RSQBRACKET 
  | 11 -> TOKEN_LBRACE 
  | 12 -> TOKEN_RBRACE 
  | 13 -> TOKEN_VARIABLE 
  | 14 -> TOKEN_IDENTIFIER 
  | 15 -> TOKEN_STRING 
  | 16 -> TOKEN_NOTHING 
  | 17 -> TOKEN_TRUE 
  | 18 -> TOKEN_FALSE 
  | 21 -> TOKEN_end_of_input
  | 19 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startConfiguration 
    | 1 -> NONTERM_Configuration 
    | 2 -> NONTERM_Attributes 
    | 3 -> NONTERM_Attributes 
    | 4 -> NONTERM_Attribute 
    | 5 -> NONTERM_Attribute 
    | 6 -> NONTERM_Attribute 
    | 7 -> NONTERM_AttributeScalar 
    | 8 -> NONTERM_AttributeArray 
    | 9 -> NONTERM_ArrayValues 
    | 10 -> NONTERM_ArrayValues 
    | 11 -> NONTERM_AttributeBlock 
    | 12 -> NONTERM_BlockValues 
    | 13 -> NONTERM_BlockValues 
    | 14 -> NONTERM_BlockValues 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 21 
let _fsyacc_tagOfErrorTerminal = 19

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | TRIM  -> "TRIM" 
  | UPPER  -> "UPPER" 
  | LOWER  -> "LOWER" 
  | PLUS  -> "PLUS" 
  | COMMA  -> "COMMA" 
  | EQUAL  -> "EQUAL" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LSQBRACKET  -> "LSQBRACKET" 
  | RSQBRACKET  -> "RSQBRACKET" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | VARIABLE _ -> "VARIABLE" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | STRING _ -> "STRING" 
  | NOTHING  -> "NOTHING" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | TRIM  -> (null : System.Object) 
  | UPPER  -> (null : System.Object) 
  | LOWER  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LSQBRACKET  -> (null : System.Object) 
  | RSQBRACKET  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOTHING  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 4us; 65535us; 0us; 2us; 19us; 4us; 22us; 5us; 25us; 6us; 4us; 65535us; 2us; 7us; 4us; 7us; 5us; 7us; 6us; 7us; 4us; 65535us; 2us; 8us; 4us; 8us; 5us; 8us; 6us; 8us; 4us; 65535us; 2us; 9us; 4us; 9us; 5us; 9us; 6us; 9us; 1us; 65535us; 14us; 15us; 4us; 65535us; 2us; 10us; 4us; 10us; 5us; 10us; 6us; 10us; 1us; 65535us; 11us; 18us; 6us; 65535us; 12us; 13us; 15us; 17us; 36us; 32us; 38us; 33us; 41us; 34us; 44us; 35us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 8us; 13us; 18us; 23us; 25us; 30us; 32us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 3us; 1us; 1us; 2us; 3us; 12us; 2us; 3us; 13us; 2us; 3us; 14us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 3us; 7us; 8us; 11us; 2us; 7us; 8us; 2us; 7us; 20us; 1us; 8us; 2us; 8us; 10us; 1us; 8us; 2us; 10us; 20us; 1us; 11us; 1us; 12us; 1us; 12us; 2us; 13us; 14us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 2us; 20us; 20us; 2us; 20us; 21us; 2us; 20us; 22us; 2us; 20us; 23us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 15us; 18us; 20us; 22us; 24us; 26us; 30us; 33us; 36us; 38us; 41us; 43us; 46us; 48us; 50us; 52us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 78us; 81us; 84us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; |]
let _fsyacc_action_rows = 46
let _fsyacc_actionTableElements = [|0us; 16386us; 0us; 49152us; 2us; 32768us; 0us; 3us; 14us; 11us; 0us; 16385us; 2us; 32768us; 12us; 20us; 14us; 11us; 2us; 32768us; 12us; 23us; 14us; 11us; 2us; 32768us; 12us; 26us; 14us; 11us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 3us; 32768us; 6us; 12us; 11us; 19us; 14us; 21us; 9us; 32768us; 1us; 37us; 2us; 40us; 3us; 43us; 9us; 14us; 13us; 31us; 15us; 30us; 16us; 27us; 17us; 28us; 18us; 29us; 1us; 16391us; 4us; 36us; 0us; 16393us; 9us; 32768us; 1us; 37us; 2us; 40us; 3us; 43us; 10us; 16us; 13us; 31us; 15us; 30us; 16us; 27us; 17us; 28us; 18us; 29us; 0us; 16392us; 1us; 16394us; 4us; 36us; 0us; 16395us; 0us; 16386us; 0us; 16396us; 2us; 32768us; 11us; 22us; 15us; 24us; 0us; 16386us; 0us; 16397us; 1us; 32768us; 11us; 25us; 0us; 16386us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 2us; 32768us; 4us; 36us; 8us; 39us; 2us; 32768us; 4us; 36us; 8us; 42us; 2us; 32768us; 4us; 36us; 8us; 45us; 8us; 32768us; 1us; 37us; 2us; 40us; 3us; 43us; 13us; 31us; 15us; 30us; 16us; 27us; 17us; 28us; 18us; 29us; 1us; 32768us; 7us; 38us; 8us; 32768us; 1us; 37us; 2us; 40us; 3us; 43us; 13us; 31us; 15us; 30us; 16us; 27us; 17us; 28us; 18us; 29us; 0us; 16405us; 1us; 32768us; 7us; 41us; 8us; 32768us; 1us; 37us; 2us; 40us; 3us; 43us; 13us; 31us; 15us; 30us; 16us; 27us; 17us; 28us; 18us; 29us; 0us; 16406us; 1us; 32768us; 7us; 44us; 8us; 32768us; 1us; 37us; 2us; 40us; 3us; 43us; 13us; 31us; 15us; 30us; 16us; 27us; 17us; 28us; 18us; 29us; 0us; 16407us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 1us; 2us; 5us; 6us; 9us; 12us; 15us; 16us; 17us; 18us; 19us; 23us; 33us; 35us; 36us; 46us; 47us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 70us; 73us; 76us; 85us; 87us; 96us; 97us; 99us; 108us; 109us; 111us; 120us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 1us; 1us; 1us; 3us; 5us; 0us; 2us; 2us; 3us; 4us; 5us; 1us; 1us; 1us; 1us; 1us; 3us; 4us; 4us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 5us; 6us; 6us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16387us; 16388us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 16395us; 65535us; 16396us; 65535us; 65535us; 16397us; 65535us; 65535us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; |]
let _fsyacc_reductions ()  =    [| 
# 213 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Attributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startConfiguration));
# 222 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Attributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                     _1 
                   )
# 42 "Parser.fsy"
                 : AST.Attributes));
# 233 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                               [] 
                   )
# 44 "Parser.fsy"
                 : AST.Attributes));
# 243 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Attributes in
            let _2 = parseState.GetInput(2) :?> AST.Attribute in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                        _1 @ [_2] 
                   )
# 45 "Parser.fsy"
                 : AST.Attributes));
# 255 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Attribute in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                  _1 
                   )
# 47 "Parser.fsy"
                 : AST.Attribute));
# 266 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Attribute in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                 _1 
                   )
# 48 "Parser.fsy"
                 : AST.Attribute));
# 277 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Attribute in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                 _1 
                   )
# 49 "Parser.fsy"
                 : AST.Attribute));
# 288 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> AST.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                              { Name = _1; Value = Scalar _3 } 
                   )
# 51 "Parser.fsy"
                 : AST.Attribute));
# 300 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_ArrayValues in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                                          { Name = _1; Value = Array _4 } 
                   )
# 53 "Parser.fsy"
                 : AST.Attribute));
# 312 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                [] 
                   )
# 54 "Parser.fsy"
                 : 'gentype_ArrayValues));
# 322 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ArrayValues in
            let _2 = parseState.GetInput(2) :?> AST.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                     _1 @ [_2] 
                   )
# 55 "Parser.fsy"
                 : 'gentype_ArrayValues));
# 334 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> AST.Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                              { Name = _1; Value = Block _2 } 
                   )
# 57 "Parser.fsy"
                 : AST.Attribute));
# 346 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.Attributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                             { Kind = None; Alias = None; Attributes = _2 } 
                   )
# 58 "Parser.fsy"
                 : AST.Block));
# 357 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> AST.Attributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                                        { Kind = Some _1; Alias = Some _1; Attributes = _3 } 
                   )
# 59 "Parser.fsy"
                 : AST.Block));
# 369 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> AST.Attributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                                               { Kind = Some _1; Alias = Some _2; Attributes = _4 } 
                   )
# 60 "Parser.fsy"
                 : AST.Block));
# 382 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                     Nothing 
                   )
# 62 "Parser.fsy"
                 : AST.Expr));
# 392 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                  Boolean true 
                   )
# 63 "Parser.fsy"
                 : AST.Expr));
# 402 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                   Boolean false 
                   )
# 64 "Parser.fsy"
                 : AST.Expr));
# 412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                    String _1 
                   )
# 65 "Parser.fsy"
                 : AST.Expr));
# 423 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                      Variable _1 
                   )
# 66 "Parser.fsy"
                 : AST.Expr));
# 434 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Expr in
            let _3 = parseState.GetInput(3) :?> AST.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                            InfixFunction (_1, Plus, _3) 
                   )
# 67 "Parser.fsy"
                 : AST.Expr));
# 446 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> AST.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                     Function (Trim, _3) 
                   )
# 68 "Parser.fsy"
                 : AST.Expr));
# 457 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> AST.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                      Function (Upper, _3) 
                   )
# 69 "Parser.fsy"
                 : AST.Expr));
# 468 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> AST.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                      Function (Lower, _3) 
                   )
# 70 "Parser.fsy"
                 : AST.Expr));
|]
# 480 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 22;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Configuration lexer lexbuf : AST.Attributes =
    engine lexer lexbuf 0 :?> _
