%{ 
open Terrabuild.Parser.AST
open Terrabuild.Parser.Project.AST


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start Project
 
// terminal tokens
%token NOTHING TRUE FALSE
%token <string> STRING
%token <string> IDENTIFIER
%token <string> VARIABLE
%token <string> KEY
%token LBRACE RBRACE
%token LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL
%token COMMA
%token PLUS
%token TRIM UPPER LOWER
%token EOF
%token EXTENSION CONFIGURATION TARGET 
%token DEPENDENCIES OUTPUTS IGNORES LABELS PARSER CONTAINER PARAMETERS SCRIPT DEPENDS_ON

// associativity and precedences
%left PLUS

%type <Terrabuild.Parser.Project.AST.Project> Project
%% 

Project:
    | ProjectComponents EOF { $1 }

ProjectComponents:
    | /* empty */ { Project.Empty }
    | ProjectComponents Extension { $1.Patch $2 }
    | ProjectComponents Configuration { $1.Patch $2 }
    | ProjectComponents Target { $1.Patch $2 }


Extension:
    | EXTENSION IDENTIFIER LBRACE ExtensionComponents RBRACE { ProjectComponents.Extension ($2, $4) }
ExtensionComponents:
    | /* empty */ { Extension.Empty }
    | ExtensionComponents Container { $1.Patch $2 }
    | ExtensionComponents Script { $1.Patch $2 }
    | ExtensionComponents Parameters { $1.Patch $2 }
Container:
    | CONTAINER EQUAL String { ExtensionComponents.Container $3 }
Script:
    | SCRIPT EQUAL String { ExtensionComponents.Script $3 }
Parameters:
    | PARAMETERS LBRACE Variables RBRACE { ExtensionComponents.Parameters $3 }


Configuration:
    | CONFIGURATION LBRACE ConfigurationComponents RBRACE { ProjectComponents.Configuration $3 }
ConfigurationComponents:
    | /* empty */ { Configuration.Empty }
    | ConfigurationComponents ConfigurationDependencies { $1.Patch $2 }
    | ConfigurationComponents ConfigurationOutputs { $1.Patch $2 }
    | ConfigurationComponents ConfigurationIgnores { $1.Patch $2 }
    | ConfigurationComponents ConfigurationLabels { $1.Patch $2 }
    | ConfigurationComponents ConfigurationParser { $1.Patch $2 }
ConfigurationDependencies:
    | DEPENDENCIES EQUAL ListOfString { ConfigurationComponents.Dependencies $3 }
ConfigurationOutputs:
    | OUTPUTS EQUAL ListOfString { ConfigurationComponents.Outputs $3 }
ConfigurationIgnores:
    | IGNORES EQUAL ListOfString { ConfigurationComponents.Ignores $3 }
ConfigurationLabels:
    | LABELS EQUAL ListOfString { ConfigurationComponents.Labels $3 }
ConfigurationParser:
    | PARSER EQUAL String { ConfigurationComponents.Parser $3 }


Target:
    | TARGET IDENTIFIER LBRACE TargetComponents RBRACE { ProjectComponents.Target ($2, $4) }
TargetComponents:
    | /* empty */ { Target.Empty }
    | TargetComponents DependsOn { $1.Patch $2 }
    | TargetComponents Step { $1.Patch $2 }
DependsOn:
    | DEPENDS_ON EQUAL ListOfString { TargetComponents.DependsOn $3 }
Step:
    | IDENTIFIER IDENTIFIER LBRACE Variables RBRACE { TargetComponents.Step { Extension = $1; Command = $2; Parameters = $4 } }

String:
    | STRING { $1 }
ListOfString:
    | LSQBRACKET Strings RSQBRACKET { $2 }
Strings:
    | /* empty */ { [] }
    | Strings String { $1 @ [$2] }

Variables:
    | /* empty */ { Map.empty }        
    | Variables Variable { $1.Add $2 }
Variable:
    | KEY Expr { ($1, $2) }

Expr:
    | NOTHING { Nothing }
    | TRUE { Boolean true }
    | FALSE { Boolean false }
    | STRING { String $1 }
    | VARIABLE { Variable $1 }
    | Expr PLUS Expr { InfixFunction ($1, Plus, $3) }
    | TRIM LPAREN Expr RPAREN { Function (Trim, $3) }
    | UPPER LPAREN Expr RPAREN { Function (Upper, $3) }
    | LOWER LPAREN Expr RPAREN { Function (Lower, $3) }
