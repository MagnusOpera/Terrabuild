%{ 
open Terrabuild.Lang.AST
open Helpers
open Terrabuild.Expressions
open System


#if DEBUG
let debugPrint s = printfn "### %s" s
#else
let debugPrint s = ignore s
#endif

%}
 
%start File
 
// terminal tokens
%token <string> STRING
%token STRING_START
%token <string> STRING_END
%token <string> EXPRESSION_START
%token EXPRESSION_END
%token <string> IDENTIFIER
%token <string> KEY
%token <int> NUMBER

%token LBRACE RBRACE
%token DOT DOT_QUESTION LSQBRACKET RSQBRACKET
%token LPAREN RPAREN
%token EQUAL DOUBLE_EQUAL NOT_EQUAL
%token COMMA
%token MINUS PLUS MULT DIV
%token DOUBLE_QUESTION QUESTION COLON BANG AND OR
%token EOF

// associativity and precedences
%right LSQBRACKET
%left RSQBRACKET
%left COLON
%right QUESTION
%left DOUBLE_QUESTION
%left DOUBLE_EQUAL NOT_EQUAL
%left MINUS PLUS
%left MULT DIV
%left OR AND
%left DOT DOT_QUESTION
%right BANG
%left COMMA

%type <Terrabuild.Lang.AST.File> File
%% 

File:
    | EOF { File.Build [] }
    | Blocks EOF { File.Build $1 }

Attributes:
    | Attribute { [$1] }
    | Attributes Attribute { Attribute.Append $1 $2 }

Attribute:
    | AttributeName EQUAL Expr { Attribute.Build $1 $3 }

Blocks:
    | Block { [$1] }
    | Blocks Block { $1 @ [$2] }

Block:
    | ResourceName LBRACE BlockContent RBRACE { Block.Build $1 None $3 }
    | ResourceName ResourceIdentifier LBRACE BlockContent RBRACE { Block.Build $1 (Some $2) $4 }

BlockContent:
    | /* empty */ { ([], []) }
    | Attributes { ($1, []) }
    | Blocks { ([], $1) }
    | Attributes Blocks { ($1, $2) }

Expr:
    /* structures */
    | ExprList { Expr.List $1 }
    | ExprMap { Expr.Map $1 }
    /* scalars */
    | NUMBER { Expr.Number $1 }
    | ExprLiteral { $1 }
    | InterpolatedString { $1 }
    /* functions */
    | Function { $1 }
    /* operators */
    | Data { $1 }
    | Expr DOUBLE_EQUAL Expr { Expr.Function (Function.Equal, [$1; $3]) }
    | Expr NOT_EQUAL Expr { Expr.Function (Function.NotEqual, [$1; $3]) }
    | Expr PLUS Expr { Expr.Function (Function.Plus, [$1; $3]) }
    | Expr MINUS Expr { Expr.Function (Function.Minus, [$1; $3]) }
    | Expr MULT Expr { Expr.Function (Function.Mult, [$1; $3]) }
    | Expr DIV Expr { Expr.Function (Function.Div, [$1; $3]) }
    | Expr AND Expr { Expr.Function (Function.And, [$1; $3]) }
    | Expr OR Expr { Expr.Function (Function.Or, [$1; $3]) }
    | Expr DOUBLE_QUESTION Expr { Expr.Function (Function.Coalesce, [$1; $3]) }
    | Expr QUESTION Expr COLON Expr { Expr.Function (Function.Ternary, [$1; $3; $5] ) }
    | BANG Expr { Expr.Function (Function.Not, [$2]) }

Data:
    | DataIdentifier { $1 }
    | Data DOT ExprIndex { Expr.Function (Function.Item, [$1;  $3]) }
    | Data DOT_QUESTION ExprIndex { Expr.Function (Function.TryItem, [$1; $3]) }

DataIdentifier:
    | IDENTIFIER DOT IDENTIFIER { 
        Expr.Variable $"{$1 |> parseScopeIdentifier}.{$3 |> parseIdentifier}"
    }

Function:
    | IDENTIFIER ExprTuple { parseFunction $2 $1 }

ResourceName:
    | IDENTIFIER { parseResourceName $1 }
 
ResourceIdentifier:
    | IDENTIFIER { parseResourceIdentifier $1 }

AttributeName:
    | IDENTIFIER { parseAttributeName $1 }

ExprIndex:
    | NUMBER { Expr.Number $1 }
    | IDENTIFIER { Expr.String $1 }

ExprLiteral:
    | IDENTIFIER { parseExpressionLiteral $1 }

String:
    | STRING_START STRING_END { $2 }

InterpolatedString:
    | String { Expr.String $1 }
    | STRING_START InterpolatedStringExpression STRING_END { 
        if $3 |> String.IsNullOrEmpty then Expr.Function (Function.ToString, [$2])
        else Expr.Function (Function.Format, [Expr.String "{0}{1}"; $2; Expr.String $3]) 
    }

InterpolatedStringExpression:
    | EXPRESSION_START Expr EXPRESSION_END { 
        if $1 |> String.IsNullOrEmpty then $2
        else Expr.Function (Function.Format, [Expr.String "{0}{1}"; Expr.String $1; $2])
    }
    | InterpolatedStringExpression EXPRESSION_START Expr EXPRESSION_END {
        if $2 |> String.IsNullOrEmpty then Expr.Function (Function.Format, [Expr.String "{0}{1}"; $1; $3])
        else Expr.Function (Function.Format, [Expr.String "{0}{1}{2}"; $1; Expr.String $2; $3])
    }

ExprTuple:
    | LPAREN ExprTupleContent RPAREN { $2 }
ExprTupleContent:
    | /* empty */ { [] }
    | Expr { [$1] }
    | ExprTupleContent COMMA Expr { $1 @ [$3] }

ExprList:
    | LSQBRACKET ExprListContent RSQBRACKET { $2 }
ExprListContent:
    | /* empty */ { [] }
    | ExprListContent Expr { $1 @ [$2] }

ExprMap:
    | LBRACE ExprMapContent RBRACE { $2 }
ExprMapContent:
    | /* empty */ { Map.empty }
    | ExprMapContent KEY Expr { $1.Add ($2, $3) }
