{
// module Lexer

open Terrabuild.Lang.Parser  // we need the terminal tokens from the Parser
open FSharp.Text.Lexing
open System.Text
open Errors
open System.Collections.Generic

let lexeme = LexBuffer<_>.LexemeString

let mkIdentifier lexbuf =
    let s = lexbuf |> lexeme  |> string
    s.Replace("`", "").Replace(" ", "").Replace(":", "").Replace("$", "")



[<RequireQualifiedAccess>]
type LexerMode =
    | Default
    | String

let peek (lexerMode: Stack<LexerMode>) = lexerMode.Peek()
let push mode (lexerMode: Stack<LexerMode>) = lexerMode.Push(mode)
let pop (lexerMode: Stack<LexerMode>) = lexerMode.Pop()


}

let regularIdentifier = ['a'-'z'] (['_' '-']? ['a'-'z' 'A'-'Z' '0'-'9']+)*
let extensionIdentifier = '@' regularIdentifier
let targetIdentifier = '^' regularIdentifier

let identifier = regularIdentifier | extensionIdentifier | targetIdentifier
let keyIdentifier = regularIdentifier ':'

let number = '-'? ['0'-'9']+('.'['0'-'9']+)?
let whitespace = ' ' | '\t'
let newline = '\n' | '\r' '\n'





rule token lexerMode = parse
    | ".[" { DOT_LSQBRACKET }
    | "??" { DOUBLE_QUESTION }
    | "?" { QUESTION }
    | "." { DOT }
    | ":" { COLON }
    | "{" {
        let mode = lexerMode |> peek
        lexerMode |> push LexerMode.Default
        match mode with
        | LexerMode.String -> STRING_START
        | _ -> LBRACE
    }
    | "}" {
        lexerMode |> pop |> ignore
        match lexerMode |> peek with
        | LexerMode.Default -> RBRACE
        | _ -> EXPRESSION_END
    }
    | "[" { LSQBRACKET }
    | "]" { RSQBRACKET }
    | "(" { LPAREN }
    | ")" { RPAREN }
    | "==" { DOUBLE_EQUAL }
    | "=" { EQUAL }
    | "!=" { NOT_EQUAL }
    | "," { COMMA }
    | "-" { MINUS }
    | "+" { PLUS }
    | "*" { MULT }
    | "/" { DIV }
    | "!" { BANG }
    | "&" { AND }
    | "|" { OR }
    | "#" { singleLineComment lexerMode lexbuf }
    | '"' {
        lexerMode |> push LexerMode.String
        STRING_START
    }

    | identifier { lexbuf |> mkIdentifier |> IDENTIFIER }
    | keyIdentifier { lexbuf |> mkIdentifier |> KEY }

    | number {
        let s = lexeme lexbuf |> int
        NUMBER (s)
    }

    | whitespace { token lexerMode lexbuf }
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexerMode lexbuf }
    | eof { EOF }
    | _ { Errors.raiseParseError $"unrecognized input: '{lexeme lexbuf}'" }

and singleLineComment lexerMode = parse
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexerMode lexbuf }
    | eof { EOF }
    | _ { singleLineComment lexerMode lexbuf }

and interpolatedString (acc: StringBuilder) lexerMode = parse
    | newline { raiseParseError "newline encountered in string" }
    | "\"\"" {
        acc.Append("\"") |> ignore
        interpolatedString acc lexerMode lexbuf
    }
    | "{{" {
        acc.Append("{") |> ignore
        interpolatedString acc lexerMode lexbuf
    }
    | "}}" {
        acc.Append("}") |> ignore
        interpolatedString acc lexerMode lexbuf
    }
    | '"' {
        lexerMode |> pop |> ignore
        STRING_END (acc.ToString())
    }
    | "${" {
        lexerMode |> push LexerMode.Default
        EXPRESSION_START (acc.ToString())
    }
    | _ {
        lexbuf |> lexeme |> acc.Append |> ignore
        interpolatedString acc lexerMode lexbuf
    }
